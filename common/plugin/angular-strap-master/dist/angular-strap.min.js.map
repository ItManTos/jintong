{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","modal/modal.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","popover/popover.js","navbar/navbar.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","alert/alert.js","aside/aside.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","backdropAnimation","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","contentEl","findElement","contentTemplate","removeAttr","html","templates","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","data","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","length","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","isUndefined","$element","hide","$onKeyDown","$$phase","$root","TypeaheadFactory","array","isFunction","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsOptions","test","parsedOptions","$parseOptions","typeahead","watchOptions","watchedOptions","$watchCollection","values","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$setViewValue","$viewValue","substring","displayValue","slice","$formatters","push","modelValue","selected","val","destroy","label","toString","$on","target","placement","title","type","autoClose","bsEnabled","viewport","selector","padding","isTouch","TooltipFactory","$new","split","enterAnimateCallback","leaveAnimateCallback","_tipToHide","$isShown","leave","triggers","nodeName","on","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","off","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","clearTimeout","timeout","tipScope","$destroy","$options","$promise","$bsCompiler","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","hoverState","compileData","promise","tipContainer","init","bindTriggerEvents","isElement","focus","destroyTipElement","parent","after","lastChild","display","visibility","clonedElement","addClass","prefixClass","version","prepend","$applyPlacement","$animate","_blur","blur","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","tooltip","transclusion","isDefined","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","isNative","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","setSelectionRange","collapse","selectionStart","moveStart","selectionEnd","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","dataMultiple","inputEl","addEventListener","join","$getIndex","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","minor","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","ss","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","backdrop","bodyElement","backdropCount","dialogBaseZindex","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","$show","bottom","destroyModalElement","z-index","backdropBaseZindex","customClass","bindBackdropEvents","defaultPrevented","which","modalClass","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","bsDropdown","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$picker","$views","$mode","datepickerViews","$selectPane","$toggleMode","setMode","updateDisabledDates","disabledDateRanges","dateRanges","mode","pristine","$updateSelected","built","$setDisabledEl","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","size","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","bind","toggleClass","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AsideFactory","$aside","bsAside","aside","AffixFactory","$affix","inlineStyles","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","offsetBottom","elementHeight","initialAffixTop","pageYOffset","affixed","unpin","$parseOffsets","affix","setWidth","offsetUnpin","$onResize","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"CAOA,SCIAA,EAAAA,EAAAC,GDHE,YA0iFA,SEn+EFC,GAAAC,EAAAD,EAAAA,EAAAA,EAAAA,EAAAA,GFsiFI,QEz8EJE,GAAAC,EAAAA,GF08EM,MEz8ENC,SAAAC,SAAAC,GAAAA,GAAAA,iBAAAA,IF48EI,QAASC,GAAcC,GACrB,MAAIC,GAAcD,GAAkBC,EAAcD,GGtnFxDE,EAAAF,GAAAG,EAAAC,IAAAJ,GAIAK,MAAAA,IACAC,KAAAA,SAAAR,GACAS,MAAAA,GAAAA,OHyiFIC,KEn+EJC,QAAAT,SAAAP,GACAiB,EAAAA,UAAAjB,UAAAiB,KAAAA,EAAAA,YACAC,QAAAC,KAAAA,oGACAnB,EAAAoB,YAAAC,EAAArB,SACAA,EAAAsB,SAAAD,GAEA,IAAAE,GAAAA,EAAAvB,YAKAwB,EAAAC,EAAAL,UAAAM,GACAT,EAAAU,EAAAD,WACAN,EAAAQ,EAAAA,aFg+EUR,EE/9EVI,QAAAH,KAAArB,EAAAoB,aACAA,EAAAS,QAAAD,KAAAA,EAAAE,YFg+EUC,EAAoB/B,EAAQ+B,mBAAqBP,QAAQQ,SACzDT,EAAmBvB,EAAQuB,gBEl9ErC,IAVAC,QAAAS,QAAAb,EAAAE,SAAAA,EAAAA,GAEAf,QAAAoB,SAAAD,GACAN,EAAAc,GAAAA,EAAAC,IAAA5B,GAEAa,EAAAc,GAAAA,EAAA5B,OAAAP,KF+9EMyB,QAAQS,OAAOb,EAASE,GE19E9BtB,EAEAoB,EAAAc,UAAAE,EAAAC,KAAAA,OAEA,CAAA,IAAAC,EF49EQ,KEv9ER,IAAAA,OAAAA,6CFq9EQlB,GEz9ERmB,UAAAC,EAAAzC,GFq+EM,MARIC,GAAQyC,kBEp9ElBrB,EAAAiB,UAAAjB,EAAAjB,KAAAiB,EAAAE,UAAAA,EAAAA,EAAAA,mBAAAA,KAAAA,SAAAA,GAEA,GAAAf,GAAAwB,QAAAA,QAAAT,EAAAY,IACAlC,EAAAwC,EAAA,yCAAAF,EAAA,IAAAI,WAAA,WAAAC,KAAAC,EAAA,GFs9EU,OEr9EVrC,GAAAA,aAAAsC,EAAAC,OAAAC,SFq9EiBT,EAAW,GAAGU,aE98E/BZ,EAAAC,IAAAjB,GAAAjB,KAAA,SAAAmB,GFk9EQ,GEj9ERA,GAAAA,EAAAA,EAAAA,UACAlB,GAAAA,OACA6C,EAAA1C,EAAA2C,QAAAA,cAAAA,kBFm9EQ,IE/8ER9C,GAAAa,QAAAb,QAAA,SAAAuC,KAAApC,EAAA4C,QAAAC,WFg9EYC,EE/8EZC,EAAAA,EFg9EQ,QACEhC,OE/8EVE,EFg9EUpB,QAASA,EACT6C,KE98EV,SAAAzB,GFg9EY,GADAF,EE78EZlB,OAAA8C,EACA9C,EAAAmD,CAEA,GAAApC,GAAAA,EAAAF,EAAAK,GAAA,EACA4B,IF68EgB1B,QAAQS,OAAOqB,EAAWE,SAAUlC,EEz8EpD,IAAAmC,GAAAJ,QAAAK,SAAAC,GAAAA,EAAAA,GF48EcvD,GAAQwD,KAAK,0BAA2BH,GACxCrD,EAAQmD,WAAWK,KAAK,0BAA2BH,GAC/CtC,IACF+B,EAAM/B,GAAgBsC,GAG1B,MAAOJ,GAAOQ,MAAM,KAAMF,eAQlC,IAAInD,MA/mFNsD,ECIFC,SAAA,KAAA,QAAA,YAAA,WAAA,cAAA,kBDHEvC,QCIFwC,OAAA,4BAAA,yBAAA,wCAAAC,SAAA,aAAA,WDHI,GCIJC,GAAAnD,KAAAH,UACAuD,UAAA,UACAxB,YAAA,YACAyB,YAAA,aACAC,UAAA,cACAC,YAAA,+BACAC,QAAA,QACAC,WAAAA,EACAC,UAAAA,EACAC,MAAAA,EDHMN,MAAO,ECMbrD,UAAA4D,EAEAL,OAAA,gBDLMC,MCONK,EDNMJ,YCSNxE,EDRMyE,WCUNG,GDTMF,WCUNG,EDRI9D,MCWJmC,MAAA4B,UAAAA,aAAA,WAAA,QAAA,WAAA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GDVM,QCWNjC,GAAAkC,EAAAA,EAAAA,GDVQ,GCWRlC,MDVYlD,EAAUwB,QAAQS,UAAWrB,EAAUyE,ECYnDnC,GAAA4B,EAAAA,EAAAA,EAEA5B,IAAAA,GAAAmC,EAAAnC,MACAA,EAAAoC,EAAAC,MDXQrC,GCYR0B,cAAAY,WDXUtC,EAAMkC,YACNlC,EAAMuC,aAAezF,EAAQwE,WAAa,EAAI,IAEhDtB,ECaRA,gBDZQA,ECaR0B,UAAAc,SAAAC,GDZUzC,EAAMoC,aAAa,WACjBV,EAAWY,SAASG,MAGxBzC,EAAM0C,QAAU,SAASD,EAAOE,GCkBxCjB,EAAAA,aAAA,WACA1B,EAAAkC,OAAAU,MDdQ5C,EAAM6C,WAAa,WCqB3BC,MAAAA,GAAA9C,cDlBQ0B,EAAWqB,OAAS,SAASH,GCsBrClB,EAAAA,SAAAY,EACAtC,EAAAuC,cAAAE,EAAAA,SDpBYzC,EAAMuC,aAAezF,EAAQwE,WAAa,EAAI,ICwB1DwB,EAAAL,GACAT,EAAAxD,EAAAwB,kBDpBQ0B,ECuBR3D,SAAAiF,SAAAA,GACAhD,EAAA4B,aAAAA,GDrBQF,ECwBRuB,OAAAnG,SAAAH,GDvBU,GAAc,KAAV8F,EAAJ,CC4BVf,GAAAA,GAAAmB,EAAAA,SAAAJ,GAAAjE,KACAT,GAAAjB,cAAAqE,GD1BUpD,EC2BViC,UD1BUA,EAAM4B,gBC6BhBD,GAAAO,EAAAgB,UD3BUlD,EAAMiD,MAAMnG,EAAQH,YAAc,UAAW6B,EAAOiE,EAAOf,KAE7DA,EC6BRe,WAAAA,WACA,MAAAA,GAAAzC,WAAAkC,EAGAO,EAAAA,SAAAA,QAAAA,QAAAA,SAAAA,EAAAA,aAAAA,EAAAA,WAAAA,QAAAA,EAAAA,YAFAnE,EAAA6E,SAAAnD,QAKA0B,EAAA0B,UAAAA,SAAA5E,GAEAmE,GAAAU,EACAV,KAAAW,EAAAA,EAAAA,SAAAA,OAAAA,MD9BgBhF,QAAQ6E,OAAOnD,EAAMkC,SAASO,GAAOjE,MAAOA,KCkC5D,MAAAiE,ID9BQf,ECkCR2B,aAAAA,SAAAA,GDjCUV,ECkCVA,iBDjCUA,EAAIW,mBAEN5B,ECoCRA,WAAA1B,SAAAuC,GDnCe,aCuCfgB,KAAAA,EAAAA,YAGAvD,EAAAwD,cAAAA,KAAAA,EAAAA,SAAAA,KAAAA,EAAAA,eDxCYb,EAAIU,iBC6ChBI,EAAAA,mBAEAA,KAAAA,EAAAA,SAAAA,EAAAA,SAAAA,OAGAxB,EAAAO,OAAAxC,EAAAuC,cACA,KAAAb,EAAAA,SAAA1B,EAAAuC,aAAA,EAAAvC,EAAAuC,eAAA,KAAAI,EAAAY,SAAAvD,EAAAuC,aAAAvC,EAAAkC,SAAAgB,OAAA,EAAAlD,EAAAuC,eAAAjE,QAAAoF,YAAA1D,EAAAuC,gBAAAvC,EAAAuC,aAAA,GD7CUvC,EC8CV0B,WD5CQ,IAAI+B,GC8CZ/B,EAAAxE,ID7CQwE,GAAW+B,KAAO,WAChBA,IACAxB,EC8CV,WD7CgBP,EAAWiC,WCgD3BC,EAAAlC,SAAAkC,GAAAA,YAAAA,EAAAA,cACAlC,EAAAT,UACAS,GAAAiC,EAAAjC,GAAAA,UAAAiC,EAAAE,cD5Ca,GAAG,GAER,IC+CRnC,GAAAA,EAAAY,IDpCQ,OAVAZ,GAAWkC,KAAO,WCgD1BA,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,YAAAA,EAAAA,cD9Cc9G,EAAQmE,UCiDtBS,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAMAoB,EAAAA,YAEA9C,EAAA8D,SAAAC,IAIAC,KDrDetC,EC6Df,QAAAoB,GAAAmB,GACAjE,EAAAiE,SAAA3F,EAAA4F,OAAAD,EAAAhH,MAAA6G,SAAA9D,EAAAwD,UDxDM,MADAQ,GC2DNG,SAAAzG,ED1DasG,MAER5C,OC2DL,iBAAA6C,UAAAG,SAAA7C,GD1DI,MAAO,UAAS0C,EAAOG,EAAY7C,GACjC,MC6DN8C,IAAA/F,QAAA4F,WAAAD,EAAAhH,MAEAS,EAAAgE,KAAAA,SAAAhE,GAEA,MAAAyG,GAAA,UAAAG,EAAAF,EAAA7C,KAGA4C,EAAAI,UAAAvE,EAAA9C,EAAAsH,OD7DOH,UCiEPrE,eAAAA,UAAAA,SAAAA,KAAAA,aAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GDhEI,GAAItC,GAAWgE,EAAWhE,QAC1B,QACE+G,SCiENnG,MDhEMoG,QAAS,UACT3E,KCmEN4E,SAAAA,EAAAzH,EAAAsH,EAAAzG,GACAO,GAAAA,IACA0B,MAAA1B,EAIAA,SAAApB,SAAA,WAAA,cAAAsH,aAAA,eAAA,YAAA,YAAA,QAAA,UAAA,WAAA,OAAA,YAAA,SAAA,QAAA,YAAA,eAAA,aAAA,aAAA,aAAA,KAAA,cAAA,eAAA,SAAA7F,GAGAyC,QAAAtE,UAAAsE,EAAAA,MAAA1D,EAAA0D,GAAAA,EAAAA,KAEA,IAAAG,GAAAzE,eAEAwB,SAAAsG,SAAAJ,OAAAI,YAAAA,aAAAA,SAAAA,GACAxD,QAAAwD,UAAAA,EAAAjG,KAAAyC,EAAAyD,KAAAL,EAAA7F,MAAA7B,EAAA6B,IAAA,KAEA0C,EAAAuD,KAAAA,iBAAA1H,EAAAmE,KAAAA,eAAAA,MACA,IAAAyD,GAAAA,EAAAC,QAAAA,EAAAH,OAGAI,EAAAA,EAAAtD,OAAAxE,EAAAa,MAGAjB,EAAAmI,EAAAA,YAAAvH,EAAA6D,WAEAqD,EAAAM,EAAAA,SACAlF,KAAAmF,GAAAD,MAAAA,EAAA,eAEAJ,IAAAA,GAAA9E,IAAAjC,GD7EYsD,IC8EZ2D,GAAAI,cAAAA,ED7EQ,IAAIN,GC8EZ9B,EAAAA,GD7EYgC,EAAYtD,EAAWxE,EAASa,EAAYjB,EAChD,IAAIA,EAAQmI,aAAc,CACxB,GAAIC,GAAiBJ,EAAcO,OAAO,GAAG1F,QAAQ,OAAQ,IAAIA,QAAQ,UAAW,IAAIM,MCiFlGD,GAAAsF,iBAAAC,EAAAC,SAAAC,EAAAA,GAEAzF,EAAA0F,SAAAF,EAAAA,GAAAA,KAAAA,SAAAA,GACAV,EAAAa,OAAAA,GAIA5H,EAAA6H,cDhFQ5F,ECoFRsF,OAAAF,EAAAlC,QAAA7B,SAAA+D,EAAAA,GDnFUpF,ECoFVgF,YAAAI,EDnFUN,ECqFV9B,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GDpFY,MAAIlG,GAAQ8I,aAAeR,EAAOlC,QAAUsC,EAAStC,OAAS,MAC5DnF,GAAW8H,cAAc9H,EAAW+H,WAAWC,UAAU,EAAGhI,EAAW+H,WAAW5C,OAAS,KC6FzG8C,EAAAA,OAAA3E,IAAA+D,EAAAA,EAAAa,MAAA,EAAA5E,IACA2D,EAAAgB,OAAAA,ODzFYjI,GAAWiF,eAGfjF,EAAWmI,YAAYC,KAAK,SAASC,GC8F7C,GAAAJ,GAAAlB,EAAAkB,aAAAI,ED5FU,OAAIJ,GCgGdhD,EAGAoD,GAAA,gBAAAA,GD/FmBA,ECkGnBC,KD9FQtI,ECgGRS,QAAA6H,WACAnJ,GAAAA,EAAAJ,SAAA0E,EAAAsE,YD/FY,MAAO5I,GAAQoJ,IAAI,GCoG/B,IAAAtB,GAAAA,EAAAA,UAAAuB,EAAAA,aACAzJ,EAAA,KAAA2F,EAAAuC,EAAA3C,OAAAH,SAAAO,GAAA+D,MAAAzI,EAAA+H,UACAd,GAAAA,QAAAxE,SAAA6F,GAAAvB,EAAAkB,aAAAK,GAAAA,CDjGU,IAAI7H,GAAQ6H,EAAWA,EAASI,WAAW9G,QAAQ,iBAAkB,IAAM,EAC3EzC,GAAQoJ,IAAIxJ,EAAQ0E,aAAc,EAAQhD,EAAQA,EAAMyB,SAE1DD,EAAM0G,IAAI,WAAY,WI7M9BnJ,GAAAyH,EAAAuB,UAIA7I,EAAAG,KACAF,EAAA,YJgNEW,QI3MFqI,OAAA,0BAAA,sBAAA,sCAAA5F,SAAA,WAAA,WJ4MI,GI3MJ6F,GAAA/I,KAAAH,UACAb,UAAAA,UACAQ,YAAA,GACAkC,YAAAA,UACAuB,YAAA,UACAG,WAAA,EACAxB,QAAA,EACAgE,UAAA,MACAoD,YAAA,2BACAC,SAAA,GACA5F,iBAAA,EACA6F,QAAAA,cACAC,UAAAA,EACAC,MAAAA,EJ4MMxD,MI3MNyD,EJ4MML,MI3MNM,GJ4MML,KAAM,GACN5F,MAAO,EIzMbrD,WAAA4D,EAEAuF,WAAAI,EACAH,UAEAC,SAAAG,OAEAF,QAAApF,GJ0MIlE,MIrMJ4D,MAAAzB,UAAAqC,aAAAvF,cAAAA,KAAAkD,iBAAA8B,QAAAwF,WAAAA,OAAAA,aAAAA,QAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJwMM,QIpMNC,GAAArG,EAAAqG,GJyVQ,QIpIRC,KJqIUxH,EAAMiD,MAAMnG,EAAQH,YAAc,QAASoF,GAmC7C,QAAS0F,KI3GjB1F,GJ4GU/B,EAAMiD,MAAMnG,EAAQH,YAAc,QAASoF,GI5GrDA,IAAA2F,EAAA,CACA,GAAA3F,GAAA,UAAA4F,EAAA7G,QACAiB,MAAA6F,GAAAA,GAAAA,MAEA7F,MJoLQ,QI/ER7E,KJgFU,GI/EV2K,GAAAC,EAAAhH,QAAAyG,MAAAzG,IJgFUxC,SI/EVpB,QAAA6K,EAAAX,SAAAtG,GJgF4B,UAAZA,EACF5D,EAAQ6K,GAAG,QAAShG,EAASiG,QACR,WAAZlH,IACT5D,EAAQ6K,GAAe,UAAZjH,EAAsB,aAAe,QAASiB,EAASkG,OI7EhF/K,EAAAgL,GAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACApL,WAAA+K,GAAA,UAAAN,GACArK,EAAA2K,GAAAA,EAAA3E,aAAA,YAAAnB,EAAAoG,6BJmFQ,QI9ERjL,KJgFU,II9EV,GADAA,GAAAkL,EAAAtH,QAAAyG,MAAA,KACAO,EAAAA,EAAA5E,OAAAmF,KAAAvH,CJ+EY,GI9EZ5D,GAAAkL,EAAAhB,EJ+E4B,WAAZtG,EACF5D,EAAQkL,IAAI,QAASrG,EAASiG,QACT,WAAZlH,IACT5D,EAAQkL,IAAgB,UAAZtH,EAAsB,aAAe,QAASiB,EAASkG,OI5EjF/K,EAAAoL,IAAAA,UAAAA,EAAAA,aAAAA,OAAAA,EAAAA,OACAxH,WAAAhE,GAAA,UAAAgE,GACAyH,EAAAR,IAAAX,EAAArF,aAAAyG,YAAAA,EAAAA,4BAMA,QAAAC,KACA,UAAA3L,EAAAgE,QACAyH,EAAAH,GAAAA,QAAArG,EAAAA,UAEA7E,EAAAkL,GAAAA,QAAArG,EAAAA,eAIA,QAAA2G,KACAC,UAAA7L,EAAA6L,QAGA1G,EAAAmG,IAAA,QAAArG,EAAAyG,UAKAI,EAAAb,IAAA,QAAAhG,EAAA6B,eAMA,QAAAiF,KACA5G,EAAAyG,WACAH,EAAAH,GAAAA,QAAAU,GACAF,EAAAR,GAAAA,QAAArG,EAAAA,MACA2G,GAAA,GJqEa,GAAG,GIjEhB,QAAAI,KACAC,IJoEYR,EAAWH,IAAI,QAASU,GI/DpCF,EAAAI,IAAAA,QAAArF,EAAAA,MACAA,GAAA7G,GJmEQ,QI9DRmM,GAAAC,GACAH,EAAAI,kBJgEQ,QIzDRC,GAAAA,GJ0DUzF,EAAWA,GAAa7G,EAAQ6J,QAAUzJ,CItDpD,IAAAiM,GAAAE,EAAAA,GAEAF,EAAAA,SAAA7K,EAAAA,QAAA+K,EAAAJ,EAAAA,wBAAAK,IJyDU,KAAK,GAAIF,KAAKH,GACZE,EAAKC,GAAKH,EAAOG,EIxD7B,QAAAG,EAAAF,QAAAG,EAAAlL,QAAAS,UAAAoK,GAAAM,MAAAA,EAAAC,MAAAC,EAAAA,KACAC,OAAAA,EAAAA,OAAAA,EAAAA,MACA,IAAAC,GAAAA,GAAAR,IAAAA,EAAAC,KAAAA,GAAAG,EAAAC,OAAAC,GAEAC,GJiEYA,OAAQE,EAASC,EAASC,gBAAgBC,WAAaF,EAASG,KAAKD,UAAYtG,EAASwG,KAAK,cAAgB,GI7D3HT,EAAAA,GACAL,MAAA9B,EAAAX,gBAAAwD,YAEAd,OAAA/B,EAAA8C,aACA,IJ+DU,OI9DVX,SAAAA,UAAAA,EAAAA,EAAAA,EAAAA,GJgEQ,QI9DRF,GAAAc,EAAAjB,EAAAA,EAAAA,GJ+DU,GAAIK,GI7DdnC,EAAAX,EAAAW,MAAA,IJ+DU,QAAQA,EAAM,II9DxB,IAAA,QACAmC,GACAH,IAAAe,EAAAf,IAAAe,EAAAhB,OAAAA,EAAAA,EAAAA,EACAE,KAAAc,EAAAd,KAAAc,EAAAjB,MAEA,MACA,KAAA,SACAK,GACAH,IAAAe,EAAAf,IAAAe,EAAAhB,OACAE,KAAAc,EAAAd,KAAAe,EAAAA,MAAAA,EAAAA,EAAAA,EAEA,MACA,KAAA,OACAb,GACAH,IAAAe,EAAAf,IAAAiB,EAAAA,OAAAA,EAAAA,EAAAA,EACAhB,KAAAc,EAAAd,KAAAc,EAEA,MAGA,SACAZ,GJiEcH,IAAKe,EAASf,IAAMiB,EI7DlCjD,KAAA+C,EAAAd,KAAAjC,EAAA8B,MAAA,EAAAkB,EAAA,GJkEU,II9DVhD,EAAA,GJ+DY,MAAOmC,EAET,II/DVF,QAAAE,EAAAA,IAAAY,WAAAA,EAAAd,GJgEY,OI/DZjC,EAAA,IJgEa,IAAK,OI/DlBmC,EAAAF,KAAAc,EAAAd,IACA,MJkEa,KIhEb,QACAE,EAAAnC,KAAA+C,EAAAd,KAAAc,EAAAjB,MAAAkB,MAKAb,IAAAY,SAAAf,EAAAe,IAAAf,UAAAA,EAAAA,GJkEY,OIjEZhC,EAAA,IJkEa,IAAK,MIjElBmC,EAAAH,IAAAe,EAAAf,IAAAiB,EAAAF,EAAAhB,MACA,MJoEa,KAAK,SIhElBI,EAAAA,IAAAA,EAAAA,IAUA,MAAAe,GJgEQ,QI5DRC,GAAAD,EAAAA,GAEAf,GAAAA,GAAAH,EAAAA,GACAG,EAAAF,EAAAE,YAIAD,EAAAkB,EAAAA,aACAC,EAAAC,SAAAC,EAAAA,IAAAA,EAAAA,cAAAA,IACAvC,EAAAwC,SAAAA,EAAAA,IAAAA,EAAAA,eAAAA,GJyDcL,OIxDdnB,KAAAuB,EAAAvB,GJyDcmB,MIxDdlB,KAAAsB,EAAAtB,GJyDUE,EIxDVsB,IAAAtB,EAAAH,IAAA0B,EJyDUvB,EAAOF,KAAOE,EAAOF,KAAOiB,EAC5BhB,EAAWkB,UAAUO,EAAK5M,QAAQS,QAChC6L,MIxDZlB,SAAAoB,GAGAP,EAAAA,KACAC,IAAAA,KAAAA,MAAAU,EAAAC,KAAAA,KAEAvE,KAAAA,KAAAA,MAAAkE,EAAAN,MAAAA,KACAd,MAAAH,OAOAG,GAAA0B,EAEA,IAAAC,GAAAH,EAAAI,YACA5B,EAAA2B,EAAA7B,YAKAC,IAJA,QJgDc7C,GIhDd4D,IAAAlB,IACAI,EAAAH,IAAAA,EAAAA,IAAAA,EAAAA,IAGAE,8CAAAC,KAAAA,GAAAD,CAEA,GAAA4B,GAAAD,EAAAxE,EAAA8C,EAAAa,EAAAC,EAUA,IATAa,EAAAE,KACA7B,EAAA8B,MAAAA,EAAAD,KAGAE,EAAAA,KAAAD,EAAAA,IJ+CU/B,EAAWkB,UAAUO,EAAKxB,GI1CpC,wBAAA0B,KAAAxE,GAAA0D,CACA,GAAAe,GAAAA,aAAAA,KAAAA,GAAA9B,EAAAgC,EAAA,EAAAF,EAAA7B,KAAAH,EAAAkB,EAAA,EAAAc,EAAA9B,IAAAD,EAAAkB,EAAAhB,EAAA+B,EAAA,cAAA,cJ8CYE,GAAaD,EAAYN,EAAIQ,GAAsBH,KAGvD,QI7CRI,GAAA3C,EAAAjH,EAAA6J,EAAAA,GAEA,GAAAP,IACA9B,IAAAsC,EACArC,KAAAsC,EJ8CU,KI5CVT,EAAA9B,UAAAoC,MAAAA,EJ6CU,IAAII,GI5CdD,EAAAA,UAAAH,EAAAA,SAAAA,SAAAA,EACAN,EAAAM,EAAApC,EAAAoC,UJ6CU,IAAI,aAAa9G,KAAK+B,GAAY,CAChC,GAAIiF,GI5ChBvB,EAAAf,IAAAwC,EAAAJ,EAAA/B,OACAoC,EAAA1B,EAAAd,IAAAuC,EAAAA,EAAAA,OAAAA,CACAE,GAAAA,EAAAF,IACAV,EAAAW,IAAAA,EAAAL,IAAAA,EACAnC,EAAAmC,EAAAK,IAAAA,EAAAA,SJ6CcX,EI5Cd9B,IAAA0C,EAAAN,IAAAA,EAAArC,OAAAwC,OJ8CiB,CACL,GAAIE,GAAiB1B,EAASd,KAAOuC,EI1CjDE,EAAAZ,EAAAA,KAAAA,EAAAA,CJ4CgBW,GAAiBL,EAAmBnC,KIzCpD6B,EAAAI,KAAAA,EAAAS,KAAAC,EACA7M,EAAAqM,EAAAX,QAEAoB,EAAArB,KAAAoB,EAAA3C,KAAAmC,EAAAO,MAAAA,GAMAG,MAAAA,GJwCQ,QIrCRvP,GAAAiK,EAAAmF,EAAAC,GJsCU,GIrCVtD,GAAAA,EAAAA,yBAAAA,EAAAA,GJsCUuD,GAAOrB,IAAIoB,EAAe,OAAS,MAAO,IAAM,EAAId,EAAQa,GAAa,KAAKnB,IAAIoB,EAAe,MAAQ,OAAQ,IAEnH,QIpCR1D,KJqCU4D,aAAaC,GACTvK,EAAS4F,UAA2B,OAAfY,IIlCnCgE,EAAAxF,WACAwF,IJqCgBzP,EAAQmE,UIjCxBsH,KJqCcgE,IACFA,EAASC,WIhCrBD,EAAAxK,MAMAwG,IAEAvI,EAAA8D,SJ6BYyE,EAAaxG,EAAS4B,SAAW,MApfrC,GIpMR7G,MAAA2G,EAAA8D,EAAAkF,SAAAnO,QAAAS,UAAArB,EAAAyE,GAAAyB,EAAA2D,EAAAmF,SAAAC,EAAA7O,QAAAhB,GJuMYkD,EIvMZ+B,EAAAM,OAAAvF,EAAAkD,OAAAlD,EAAAkD,MAAAsH,QAAAxF,EAAAwF,OJwMYQ,EAAW5K,EAAQ,GAAG4K,SAAS8E,aIlM3C7K,IAAAA,EAAA8K,OAAA/P,QAAAI,SAAAsH,EAAAtD,OAAA,CAGA,GAAApE,GAAA+J,EAAA3F,MAAAqG,MAAA,KAAAuF,IAAAC,WACA/M,GAAA6G,MAAAmG,EAAAC,OAAAnQ,GJkMY2G,KAAM8D,EAAM,GI9LxBvH,KAAAkN,EAAAA,IACAlN,EAAAoC,GJiMQL,EAAS8K,IAAM/P,EAAQqQ,IAAMjQ,EAAQsH,KAAK,OAAS,GAC/C1H,EAAQ+J,QI9LpB7G,EAAAoN,MAAAJ,EAAAC,YAAAnQ,EAAA+J,QJiMQ7G,EI/LR+B,YAAA6B,SAAAA,GJgMU5D,EAAMoC,aAAa,WACjBL,EAASsL,WAAWC,MAGxBtN,EI/LR+B,MAAA0B,WJgMUzD,EAAMoC,aAAa,WACjBL,EAAS6B,UAGb5D,EI/LR+B,MAAAiG,WJgMUhI,EAAMoC,aAAa,WACjBL,EAAS0B,UIzLrBzD,EAAAuN,QAAAA,WAGAvN,EAAAwN,aAAAA,WACAjF,EAAAA,YAGAkF,EAAAxQ,SAAA+C,EAAAU,UAAAA,CJ2LQ,II1LR8M,GACAzL,EJ2LYyL,EIxLZzL,EAGA2L,EACA5Q,CJwLQ2Q,GIvLRhK,KAAA3G,SAAAoE,GJwLUsM,EIvLV1Q,EJwLUiF,EAAS4L,SAEX5L,EIhLRjF,KAAAkE,WACA0M,EAAAA,OAAAxQ,QAAAA,SAAAA,EAAAA,SJiLYJ,EIhLZoE,OACAwM,KAAAA,EAAA5Q,MJiLc8G,KIhLd9G,EAAAA,QAKA8Q,SAAAA,EAAAA,UAGAF,EAAA/G,EACAA,QAAArI,UAAAuP,EAAA/Q,WJ6KY4Q,EAAe5Q,EAAQkE,UIzKnClE,EAAAkE,YACAhB,EAAAoC,EAAAtF,EAAAkE,YJ4KU4M,IACI9Q,EI1Kd6J,SJ2KY7J,EI1KZiF,OAAA0B,QAAAA,UAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,EAAAA,SJ4Kc3G,EAAQ2G,MACVzD,EAAMoC,aAAa,WACO,UAApBtF,EAAQgE,QIvK1BiB,EAAAwE,GAAAuH,QAMAC,EAAAA,UJyKQhM,EI/JRwL,QAAA,WACArF,IJgKU6F,IACA/N,EAAMwM,YAERzK,EI9JRwL,MAAAA,WAKAxL,MJ0JUsK,cI9JVnL,GJ+JUqM,EAAa,KI3JvBxL,EAAA0B,OAAA3G,EAAAoE,MAAAuC,UAIA6I,EAAA0B,WAAAA,WACAC,OAAAA,GAAAA,EAAAA,QACAnR,EAAAA,MAAAkE,OALAlE,EAAAkK,QJkKQjF,EI3JR2L,KAAAA,WJ4JU,GI3JVO,EAAA3P,YAAApB,EAAAwQ,SJ2JU,CACA1N,EAAMiD,MI3JhBnG,EAAAH,YAAA,eAAAoF,EJ4JU,II3JVkM,GJ4JcA,CACAnR,GI3JdkE,WACAgN,EAAAN,EJ6JcO,EI5JdA,EAAA/Q,GAAAA,UJ4JsBoB,QAAQpB,QAAQwQ,EAAa,GAAGQ,WIrJtDnM,OAKAwH,EAAA,KAAAC,EAAAtM,GAAAiR,GAAAJ,IJyJUxB,EIzJV6B,EAAA/L,OAAAiF,OJ0JUiB,EAAaxG,EAAS4B,SAAW6J,EAAYzN,KAAKwM,EAAU,SAAS8B,EAAerO,MIvJ9FuI,EAAAzL,KAEAyM,IAAAzM,UAEA0M,KAAA1M,UAKAkO,MAAAiD,OACAA,QAAAA,QJmJYG,WIlJZ,WJoJctR,EAAQa,WAAW4K,EAAW+F,SAASxR,EAAQa,WIhJ7DoE,EAAA4F,MAAAA,EAAAA,SAAA7K,EAAAyR,YAAA,IAAAzR,EAAAgK,MACAhE,EAAA9C,aAAAA,EAAAA,SAAAA,EAAAA,aAGA+B,EAKAkM,EAAA3P,MAAAkQ,GJ6IYR,EI3IZS,QAAAlG,GJ6IUxG,EAAS4F,SAAW3H,EAAM2H,UAAW,EI1I/C7E,EAAA9C,GAEAgC,EAAA0M,kBAEApQ,QAAAiK,QAAAA,OAAAwC,EJ0IY4D,EI1IZP,MAAA7F,EAAAyF,EAAAC,EAAAzG,GAGAmH,EAAA7R,MAAAmE,EAAA+M,EAAAC,GAAAhR,KAAAuK,GJ2IU1E,EIzIVf,GJ0IUC,EAAM,WIxIhBsG,GAAAA,EAAAA,KJ0Ic8F,WAAY,YItI1BtR,EAAAiK,WACA4B,UAAAA,EAAAA,SJyIgB5G,EAAS+L,QIpIzBxF,OAIAvG,EAAA6F,WAEAyE,MJ0IQtK,EIpIRwL,MAAAA,WJuIU,MAFAlB,cIpIVzI,GJqIU2J,EAAa,MInIvBzQ,EAAAoE,OAAA0C,EAAAA,MAAAA,UAKA0I,EAAA5E,WAAAA,WACA,QAAA3F,GAEAA,EAAAA,QAIA6M,EAAAC,MAAAA,OJyHmB9M,EAAS6B,OAQpB,IIzHRgL,GACAD,CJ0HQ5M,GIzHR6B,KAAA,SAAAiL,GACAF,EAAA/G,WJ0HU5H,EAAMiD,MAAMnG,EAAQH,YAAc,eAAgBoF,GIvH5DA,EAAAA,EACAe,EAAA9C,EAGAlD,QAAAmE,QAAAA,OAAAsH,EACAE,EAAAA,MAAAA,EAAAA,GAGAkG,EAAA7R,MAAAiK,GAAAwB,KAAAA,GJuHUxG,EAAS4F,SAAW3H,EAAM2H,UAAW,EACrC7E,EAAW9C,GInHrBlD,EAAA2K,UAAAA,OAAAA,GACAzH,IAMAlD,EAAA8R,WAAA,OAAA9N,GJiHY+H,MIhGZ9G,EAAA+L,OAAA,WACAvF,EAAAZ,SJ6GY5F,EAAS6F,QIzGrB9K,EAAAkK,SJ8GQjF,EI1GRjF,MAAAmK,WJ2GUsB,EAAW,GAAGuF,SAEhB/L,EIvGRwG,WAAA,SAAA+E,GAGAxQ,EAAA8J,UAAA9J,GJuGQiF,EIrGR+M,YAAAC,SAAAlK,GAEA/H,EAAAgS,SAAA7H,GJsGQlF,EAAS2M,gBAAkB,WIhGnCnG,GAAAA,EAAAA,CAIA,GAAAyG,GAAAA,EAAAhG,UACAiG,EAAA1G,eACA2G,EAAA3G,EAAAA,KAAA4B,EAGApI,KAGA6E,EAAAkI,EAAAnP,QAAAoP,EAAA,KAAArR,EAAAkJ,WJ4FU2B,EI1FV4G,SAAAA,EAAAnG,UJ2FU,IIzFVgG,GAAAI,IACAxI,EAAAA,EAAAwI,KAAAA,eJ0FcF,EIzFd3G,EAAA6G,KAAAA,eJ2FU,IADArN,EIzFV6E,UAAAwI,EAAAA,UAAAzP,EAAA7C,EAAAmK,SAAAC,UAAApK,EAAAmK,UJ0Fc6H,EAAW,CIvFzB,GAAAM,GAAAA,EACAxI,EAAAA,EAAA7E,EAAA6J,UJyFgB,UIxFhB/G,KAAAuK,IAAAA,EAAAJ,OAAAhE,EAAAiE,EAAAE,OACAvI,EAAAA,EAAAjH,QAAA,SAAA,OJyFuB,MAAMkF,KAAKuK,IAAsBJ,EAAgBzF,IAAM2F,EAAYC,EAAiB5F,MItF3GhB,EAAA8G,EAAAD,QAAAA,MAAAd,WAIAgB,OAAAA,KAAAC,IAAA3I,EAAAoI,KAAAA,EAAAC,EAAAC,KACAM,EAAAF,EAAAA,QAAA1I,OAAAA,SJsFuB,QAAQ/B,KAAKuK,IAAsBJ,EAAgBhE,MAAQiE,EAAWE,EAAiB9F,QInF9GtH,EAAAyG,EAAA7I,QAAAgD,QAAAA,SAEAZ,EAAA6B,YAAAA,GAAAA,SAAAA,GJsFU,GAAI0L,GAAcC,EAAoB3I,EAAWoI,EAAiBC,EAAUC,EAC5EM,GAAeF,EAAa1I,KAE9B7E,EInFRY,SAAA,SAAAA,GACAkM,KAAA3R,EAAAA,OAAA2R,EAAAA,WACAlM,EAAAW,OJoFYX,EAAIW,oBAGRvB,EIlFRsB,cAAAA,SAAAA,GACAC,KAAAA,EAAAA,QAEApG,EAAA6E,GAAA4F,OACAzK,EAAAA,oBJoFQ6E,EAASoG,yBAA2B,SAASxF,GAC3CA,EAAIU,iBI9EdV,EAAAW,kBACAuE,EAAAA,SACAvJ,EAAAC,GAAAA,OJiFYrB,EI/EZA,GAAA6K,QJ6HQ,IAAIW,IAAyB,CAuM7B,OAAO3G,GAET,QAASe,GAAW9C,GIpB1BqE,EAAAA,SAAArE,EAAA+D,OAAA/D,EAAA+D,MAAAD,SAAA9D,EAAAwD,UAGAiB,QAAAA,GAAAgL,EAAAvS,GACA8C,MAAA1B,SAAApB,SAAAA,GAAA6M,GAAA2F,iBAAAD,IJ5eM,GIpMNrI,GAAAU,eAAAA,GAAA8E,SACAhE,EAAA9L,QAAAoE,QAAA5C,EAAAG,SJqsBM,OInBNkR,OJqBKtL,UInBLrE,aAAAA,UAAAA,YAAAA,OAAAA,WAAAA,QAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GJoBI,OACEyE,SIpBNlG,MJqBMyB,OIpBN,EJqBMD,KAAM,SAAkBC,EAAO9C,EAASsH,EAAMoL,GIjBpD,GAAAjL,GACArG,GACA0B,MAAA1B,EJoBQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,kBAAmB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,oBAAqB,OAAQ,cAAe,MAAQ,SAASI,GACxNL,QAAQuR,UAAUrL,EAAK7F,MAAO7B,EAAQ6B,GAAO6F,EAAK7F,KIdhE,IAAAL,GAAAwR,eJiBQxR,SIhBRqG,SAAAA,OAAAE,aAAA,SAAAlG,GACA7B,QAAA6J,UAAAnC,EAAA7F,KAAAgG,EAAAE,KAAAL,EAAA7F,MJiBY7B,EIhBZ6B,IAAA,IJmBQ,IAAImR,GAAa5S,EAAQsH,KAAK,cIZtClG,SAAAyR,UAAAA,KACA/P,EAAA6E,KAAAiL,GJcYhT,EAAQ6J,QAAS,EIT7B7J,EAAAwB,OAAAuR,GAGA7P,EAAA1B,eAAAmH,WJYUzF,EIXVgC,MAAA,IJaQwC,EAAKwL,SAAS,QAAS,SAASxK,GAC9B,GAAIlH,QAAQuR,UAAUrK,KAAcxF,EAAM+P,eAAe,SAAU,CACjE,GAAItK,GAAWzF,EAAM6G,KACrB7G,GAAM6G,MAAQmG,EAAKC,YAAYzH,GIR3ChB,QAAAyL,UAAAxK,IACAzF,EAAAsF,WACAhH,GAAAkC,EAAAgF,uBAKAhB,EAAAlG,WJUU0B,EITVgC,OAAAwC,EAAAyL,UAAA,SAAAzK,EAAAC,GACAnH,QAAAqR,SAAAA,GJUcrR,QAAQS,OAAOiB,EAAOwF,GIPpCxF,EAAA6G,MAAArB,EAIAhB,QAAA0L,UAAAzK,IACAzF,EAAAsF,WACAqK,GAAArR,EAAAuR,sBJUa,GAEDrL,EIPZmL,QJQU3P,EAAMsF,OAAOd,EAAK0L,OAAQ,SAAS1K,EAAUC,GACtCkK,GAAYrR,QAAQuR,UAAUrK,KAC/BlH,QAAQG,SAAS+G,KAAWA,IAAaA,EAAS2K,MAAM,wBIJxE3L,KAAA,EACAxE,EAAAsF,OAGAqK,EAAArR,UJQYkG,EIJZmL,WJKU3P,EAAMsF,OAAOd,EAAKwC,UAAW,SAASxB,EAAUC,GACzCkK,GAAYrR,QAAQuR,UAAUrK,KAC/BlH,QAAQG,SAAS+G,KAAWA,IAAaA,EAAS2K,MAAM,0BIDxE3L,KAAA,EACAxE,EAAAsF,YAAA2B,GAEA0I,EAAAS,YAAA5K,MAQAxF,EAAA0G,UACA1G,EAAA2P,OAAAA,EAAAA,SAAApJ,SAAAA,GACAzJ,GAAAwB,QAAAuR,UAAArK,IACAmK,EAAAS,YAAA5K,KJCQmK,EAAU5N,EAAS7E,EAASJ,GAC5BkD,EAAM0G,IAAI,WAAY,WKv0B9BnJ,GAAAoS,EAAApJ,UAIA7I,EAAAG,KACAF,EAAA,YL00BEW,QKn0BF0C,OAAA,6BAAA,oCAAA,uCAAA,2BAAAD,SAAA,cAAA,WLo0BI,GKn0BJE,GAAApD,KAAAH,UACA+B,UAAA,UACAyB,YAAA,aAEAmP,UAAA,cACAC,YAAA,iCACAC,QAAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAC,EACA3N,SAAA,OACA4N,WAAA,YACAC,SAAAA,KACAC,gBAAA,KACAC,WAAAA,EACAC,UAAAL,EAAAA,GACAM,UAAAN,EAAAA,GACAO,OAAAA,ELm0BMN,SAAU,EKh0BhBjT,WAAA,EAEAmT,WAAAK,EACAJ,cAAA,EACAC,OAAAxT,iCLi0BMyT,SKh0BNzT,mCLi0BM0T,cAAe,QAEjBvT,MK9zBJ4D,MAAA6P,UAAAvP,YAAA7E,aAAA6B,OAAArB,iBAAAyE,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GLo0BM,QK7zBNoP,GAAAC,EAAAA,EAAAC,GAcA,QAAAC,GAAAA,GACAC,GAAAA,GAAAC,IAAAC,EAAAA,UACAC,OAAAA,IAAAF,MAAAA,KAAAC,MAAAA,EAAAA,UAAAE,GAAAA,GLmiCQ,QK3wBRC,GAAAxP,EAAAA,GL4wBU,GAAIyP,GK3wBdC,EAAAhV,CL4wBU,IK3wBVA,EAAA,GAAAiV,gBAAAD,CL4wBY,GAAIF,GK3wBhB1T,EAAAoF,GAAAA,iBACAxG,GAAAkV,UAAAC,GACAnV,EAAAoV,UAAAC,YAAAN,GL4wBYD,EAASQ,QAAQ,YAAaP,GAC9BD,EAASxP,aKzwBrBiQ,GAAAA,GAAAA,kBACAvV,EAAA,GAAA4Q,kBAAAA,EAAAA,GL2wBqBxP,QAAQoF,YAAYxG,EAAQ,GAAGmV,kBKtwBpDK,EAAApB,GAAAA,eAAA3D,EACA2D,EAAA3D,GAAAA,aAAAsE,GL0wBQ,QKvwBR/U,KLwwBUA,EKvwBV,GAAA4Q,QLkgBQ,GAAIwD,GAAcvP,EAAS7E,EAASoB,QAAQS,UAAWrB,EAAUyE,IK3zBzER,EAAAgR,EAAAC,MAEA9V,EAAAwU,EAAAxU,SACAkD,EAAAsR,EAAAuB,OL4zBYC,EAAOhW,EAAQgW,KKvzB3BC,EAAAA,SAAAC,EAAAvB,EAAAjB,GACA,MAAAyC,GAAAnW,WAAAmU,EAAA0B,EAAAA,EAAAnC,IAMA0C,EAAAC,EACAC,EAAAxB,EAAAyB,aAAAA,EAAAA,GAAAA,OAAAA,GAAAA,MLyzBYzB,EAAY7T,EAAWuV,YAAcL,EKtzBjDxB,GAEAE,KAAA4B,EAAAC,WACA1B,SAAA2B,EAAAD,WAAAC,GACAC,OAAAC,EAAAH,aACAN,OAAAU,EAAAJ,aACAJ,YAAAS,EAAAL,mBAGAxT,EAAA8T,EAAA5C,kBAAAA,EAAAA,WAAAA,GACAlR,EAAAlD,EAAAqU,YAAAA,GAIAnR,EAAAwT,EAAA/Q,cAAAA,GACA6O,EAAA9O,EAAAC,cAAAA,GLmzBYmR,EAAgBJ,EAAeI,cAAcnC,GKjzBzDzR,EAAA+T,EAAAvV,YAAAiE,GACA6O,EAAAA,EAAA9S,OAAAiE,ELmzBQzC,GAAM8T,QAAUhX,EAAQoU,OKjzBhClR,EAAAgU,UAAAA,EAAA7C,SLmzBQnR,EKlzBRsR,QAAA2C,SAAAA,EAAAjB,GLmzBU1B,EAAY9O,OAAOwQ,EAAMvQ,IAE3BzC,EK9yBR1B,WAAA4V,SAAAlB,EAAAtI,GL+yBU4G,EK9yBVA,WAAA0B,EAAAA,ILgzBQhT,EK9yBR2R,gBAAAE,SAAAA,GL+yBUP,EK9yBV0B,eAAAmB,ILgzBQ7C,EK9yBR8B,OAAAJ,SAAAK,GL+yBc/U,QAAQ4V,OAAOlB,KAAUtI,MAAMsI,EAAKoB,YK7yBlD9C,EAAA+C,MAAAA,EL+yBY/V,QK9yBZS,OAAAuS,GACAA,KAAAA,EAAA+C,WL+yBcX,OAAQV,EAAKmB,aACbjB,OAAQF,EAAKG,aK5yB3B7B,YAAA9O,EAAA6Q,oBAGA/B,EAAA4C,UACAzR,EAAA1E,UAGAA,EAAA8H,UL6yBQyL,EK1yBRrP,OAAA,SAAA+Q,EAAAvQ,EAAA6R,KACAhD,EAAA1N,YAAA8G,MAAA3M,EAAAuV,WAAAc,cAAArW,EAAAuV,WAAA,GAAAiB,MAAA,KAAA,EAAA,IL2yBejW,QAAQ4V,OAAOlB,KAAOA,EAAO,GAAIuB,MAAKvB,IAC7B,IAAVvQ,EAAa1E,EAAWuV,WAAWkB,SAASxB,EAAKnB,YAAgC,IAAVpP,EAAa1E,EAAWuV,WAAWmB,WAAWzB,EAAKmB,cAAkC,IAAV1R,GAAa1E,EAAWuV,WAAWoB,WAAW1B,EAAKG,cACzMpV,EAAW8H,cAAcvH,QAAQH,KAAKJ,EAAWuV,aKxyB3DhC,EAAA2C,UACAnX,EAAAiB,YAAAuV,GACArR,EAAA,WL0yBcqP,EAAY1N,MAAK,MAIvB0N,EKzyBRvT,eAAAiF,SAAAA,GL0yBU,GAAKjF,EAAWuV,aAAc5I,MAAM3M,EAAWuV,WAAWc,WAA1D,CKlyBV,GAAAO,IAAAA,GAAAA,EAAA9J,YAAA/N,UACAiB,GAAA6W,WAAAA,SAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,IACA7W,EAAA4T,cAAAA,QAAAA,KAAAA,EAAAA,aACA5T,EAAAiF,YLuyBQsO,EKryBRnL,OAAAA,WLsyBU,GKryBV6M,GAGA6B,EAFArO,EAAAgL,EAAAA,SAAA+B,SAAAA,EAAAA,OAAAA,EAAAA,IACAlN,ILuyBU,KAAKgC,EAAI,EAAGA,EAAIvL,EAAQoG,OAAQmF,IAC9BsJ,EAAO,GAAI4C,MAAK,KAAM,EAAG,EAAG7C,EAASC,MAAQgD,EAAWtM,GAAKvL,EAAQgU,UKpyBjF8D,EAAAE,MACApB,KAAAA,EACAlN,MAAAgL,EAAA1U,EAAAoG,GACAwQ,SAAApC,EAAAyD,OAAArD,EAAAgC,YAAAiB,EAAAtM,GACAyM,SAAA3O,EAAAA,YAAAA,EAAAA,ILwyBU,IKpyBV0O,GADAxO,ILuyBU,KAAKgC,EAAI,EAAGA,EAAIvL,EAAQoG,OAAQmF,IAC9BqL,EAAS,GAAIa,MAAK,KAAM,EAAG,EAAG,EAAG7C,EAASgC,QAAUiB,EAAWtM,GAAKvL,EAAQiU,YKpyBxF+D,EAAAE,MACA9B,KAAAA,EACA1M,MAAAgL,EAAA1U,EAAAoG,GACAgQ,SAAA5B,EAAAyD,OAAAzD,EAAA4B,YAAAyB,EAAAA,GACAK,SAAA7O,EAAAA,YAAAA,EAAAA,ILwyBU,IKpyBV0O,GADAxO,ILuyBU,KAAKgC,EAAI,EAAGA,EAAIvL,EAAQoG,OAAQmF,IAC9B6K,EAAS,GAAIqB,MAAK,KAAM,EAAG,EAAG,EAAG,EAAG7C,EAASwB,QAAUyB,EAAWtM,GAAKvL,EAAQkU,YKnyB3FgE,EAAAC,MACAjC,KAAAE,EACA1M,MAAAqN,EAAAX,EAAAU,GACAqB,SAAA9O,EAAA2O,OAAAzM,EAAAA,YAAAA,EAAAA,GLqyBcwM,SKpyBdvD,EAAA4D,YAAAhC,EAAA,ILuyBU,IAAI+B,KKnyBdjV,KAAAA,EAAAiV,EAAAA,EAAAA,EAAAA,OAAAA,IACApB,EACA7T,EAAAmV,MAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,KAEAnV,EAAAyT,MAAAA,EAAAA,GAAAA,EAAAA,IAIAnC,GAAAA,KAAA8D,EACApV,EAAAsR,YAAAyD,ELoyBU/U,EKlyBVmV,OAAAtD,ELmyBU7R,EAAMqV,MKlyBhB5S,EAAAsS,OAAAH,EAAAD,GAAA3B,MAAAnB,WAAA,GLmyBU7R,EKlyBVyT,cAAAU,ELmyBU7C,EKlyBV7O,UAAA,GLoyBQ6O,EAAY8D,YAAc,SAASpC,EAAMvQ,GACvC,MAAK6O,GAAYyD,MAAwC,IAAVtS,EKhyBzD6O,EAAA4D,aAAA5D,EAAA7O,MAAAA,WACA6S,IAAAA,EACA7S,EAAA0R,eAAA7C,EAAAyD,MAAAZ,aACAnB,IAAAsC,EACAtC,EAAAvQ,eAAA6O,EAAAyD,MAAA5B,aADAmC,QL6xByC,GAQjChE,EKjyBRgE,YAAAlB,SAAAA,EAAA1C,GLkyBU,GAAI4D,EAQJ,OKxyBVA,KAAA7S,ELkyBY6S,EAAetC,EAAKoB,UAA8B,IAAlB1C,EAASgC,OAAiC,IAAlBhC,EAASwB,OK/xB7E,IAAAqC,EACAD,EAAAlE,EAAAA,UAAA,KAAAM,EAAAC,KAAA,IAAAD,EAAAwB,OACAsC,IAAAlE,ILiyBYgE,EKhyBZtC,EAAAoB,UAAA,KAAA1C,EAAAC,KAAA,IAAAD,EAAAgC,QLkyBiB4B,EAAiC,EAAlBxY,EAAQ6T,SAAe2E,EAAiC,EAAlBxY,EAAQ8T,SK7xB9EU,EAAAA,aAAAkE,SAAAhX,EAAAiE,GACA6O,WAAAmE,EAAAA,cACAnE,EAAAmE,eAAA5D,EAAAA,GAEAP,EAAAmE,WAAAtC,EAAAA,ILkyBQ7B,EK/xBRkE,eAAA,SAAAhX,EAAAiE,GLgyBU,GK/xBVgT,GAAAhB,GAAAA,MAAAK,EAAAjK,OAAA/N,GLgyBc8X,EK/xBdnS,EAAAA,WACAgT,EAAAf,EAAAM,aLgyBcA,EAAUS,EAAQtC,YK9xBhC3Q,KAAA8O,ELgyBYmE,EAAQjB,SAASI,EAAQ/J,SAAS/N,EAAQgU,SAAU,IAAMtS,GK7xBtEuV,IAAAA,EACA0B,EAAAC,WAAAA,EAAAA,SAAAA,EAAAA,WAAAA,IAAAA,GACA,IAAAjT,GACAiT,EAAAA,WAAAnB,EAAA1J,SAAA6G,EAAAC,WAAA7U,IAAAA,GLgyBUwU,EK9xBVoE,OAAAA,EAAA7D,GAAAA,ILgyBQP,EK9xBRyC,WAAA,SAAAvV,EAAAiE,GL+xBU,GK9xBViT,EACA3W,KAAAT,GL+xBYoX,EK9xBZA,GAAAA,MAAAvB,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,QL+xBY7V,QAAQS,OAAO2S,GACbC,KK9xBd+D,EAAA7D,cAEAH,IAAA3S,GL+xBY2W,EK9xBZA,GAAAA,MAAAvC,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,QL+xBY7U,QAAQS,OAAO2S,GACbgC,OAAQgC,EAAWvB,gBAEF,IAAV1R,IK5xBrB6O,EAAAlO,GAAAA,MAAAA,KAAA,EAAA,EAAAT,EAAAA,KAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,EAAAA,OAAAA,EAAAA,YAEArE,QAAAqI,OAAAmB,GACAxE,OAAAA,EAAAA,gBL+xBUgO,EK3xBVqE,UL6xBQrE,EAAYlO,aAAe,SAAST,GAGlC,GK7xBV,UAAAgT,EAAAA,OAAAC,SAAAA,eAAAjT,EAAAU,iBL4xBUV,EAAIW,kBACA8D,EAAS,CKzxBvBkK,GAAAA,GAAAzN,QAAA3G,QAAAyF,EAAAA,OACAA,YAAAgT,EAAA,GAAA7N,SAAAjD,gBACAxB,EAAAA,EAAAA,UAIAsS,EAAApS,eAAA,WL2xBQ+N,EAAYzN,WAAa,SAASlB,GKrxB1C,GAAA8S,mBAAAnE,KAAAA,EAAAA,WAAAyD,EAAAA,WAAAA,EAAAA,OAAA,CAGA,GAFApS,EAAAiS,iBACAjS,EAAAkT,kBACAJ,KAAAX,EAAAA,QAEA,WADAxD,GAAAwE,MAAAA,EAGA,IAAAC,GAAAA,GAAAxB,MAAAjD,EAAAyD,OACAiB,EAAAA,EAAAnE,WACAoE,EAAApC,EAAAA,EAAAsB,GAAAjS,OAGA8S,EAAAA,EAAA7B,aACA2B,EAAAvS,EAAAwP,EAAAA,GAAAA,OLqxBciC,EAAUS,EAAQtC,aKhxBhC+C,EAAA1E,EAAAqE,EAAAA,GAAAA,OACAM,EAAA,EACAxT,EAAAY,UAAA4S,KAAAxT,EAAAY,SACAZ,EAAAY,EAAA4S,EAAA5S,EAAA,EAAA4R,CACAiB,KACArD,KAAAsD,EAAAA,QAAAtD,EAAAA,EAAAc,EAAAd,EAAAA,EAAAA,EAAAc,EAAAA,KAAAA,EAAAA,UAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GLmxBU,IKjxBV4B,IAAAb,EAAAA,GAEAiB,EAAAA,CACA,MAAAK,EAAAA,UAAAL,EAAAA,IACA9C,KLgxBcpQ,EKhxBdY,UAAAwP,EAAA,ELixBU,IKhxBV0C,GAAAU,IAAA1B,GAAA5J,EAEAiL,EAAAL,IAAAK,IAAAnC,GAAAzQ,IAAAA,GAAAA,CACA2S,KAAAK,GLgxBYT,EK/wBZjB,SAAA4B,EAAAD,EAAAtL,SAAA/N,EAAAgU,SAAA,KACA2E,EAAAf,EAAAM,EAAAmB,GAAArZ,OAEAwZ,GAAA9E,EAAAA,IACAqE,IAAAK,GL+wBYT,EK9wBZhB,WAAA4B,EAAAF,EAAAtL,SAAA/N,EAAAiU,WAAA,KACA+E,EAAAE,EAAA1E,EAAA2C,GAAAA,OACAiC,GAAAL,EAAAE,EAAAA,IL+wBqBK,GK7wBrB9E,EAAAA,WAAAmE,EAAA1C,EAAAA,SAAAjW,EAAAkU,WAAA,KACAuF,EAAAL,EAAAT,EAAAS,GAAAhT,OACAvB,GAAA6B,EAAAA,EAAAA,EAAAA,EAAAA,IL+wBqB6S,IK1wBrBE,GAAAA,EAAArT,iBACAgT,GAAAhT,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IL6wBUoO,EK3wBVU,OAAA9U,EAAAsZ,GAAAA,GL4wBUD,EK3wBVnE,EAAA,GAAA8D,EAAA,IL4wBUvU,EK3wBV2Q,WL+xBQ,IKvwBRpV,GAAAiN,EAAAwD,ILwwBQ2D,GKvwBR9M,KAAA,WLwwBU,MKvwBVtH,IAAAJ,EAAA2V,WLwwBYvV,EAAQiN,KAAK,OAAQ,YKtwBjCuI,GAAAA,IAAAA,qBAAAA,eAGA+D,IACAnF,EAAA/K,KAAAA,OAAA,QACArJ,EAAAmU,KAAAA,WAAAhB,QACAnT,EAAAkL,GAAAA,QAAAqK,QAEAgE,MAGA,IAAAC,GAAApF,EAAA7N,OACA6N,GAAA7N,QAAA,WACA4N,GAAAnU,EAAAsH,WACAkS,EAAAA,IAAAA,QAAAA,GLuwBUD,IAEF,IAAIC,GKnwBZxZ,EAAAA,ILowBQoU,GAAY7N,KAAO,YKlwB3B2D,GAAAlK,EAAAsH,KAAA,aAAAtH,EAAAsH,KAAA,cLowBUkS,IKjwBVzU,EAAA0U,WACArF,EAAA3N,UAAAkL,EAAAA,SAAAA,GAAAA,EAAAA,aAAAA,YAAAA,EAAAA,cACAyC,EAAAA,UACAA,GAAA3N,EAAAA,GAAA2N,UAAA3N,EAAAyD,aAEA,GAAAlK,ILowBQ,IKlwBRyZ,GAAA9H,EAAAA,IAkBAwC,OLivBQC,GAAY1N,KAAO,SAASiL,GKhwBpCyC,EAAAA,WLkwBcA,EAAY3N,UAAU2N,EAAY3N,SAASyE,IAAIhB,EAAU,aAAe,YAAakK,EAAYlO,cK9vB/GmO,EAAAA,UACAA,GAAAA,EAAAA,IAAAA,UAAAA,EAAAA,YAOAlN,EAAAwK,KAGAwC,ELocM,GK9zBNA,GAAA1P,6BAAA3B,KAAAA,EAAAA,UAAAA,WACAoH,EAAAtK,eAAA2P,GAAAA,UAAAA,CA6XA/H,OA5XAhH,GAAA4T,OAEA5T,EAAAoV,KAAAhW,EAAAgW,oBAyXArO,EAAA/G,SAAAA,EACAgH,ML0vBKL,UKtvBLvH,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GLuvBI,GAAIY,GKtvBRsC,EAAAA,SLuvBQqR,EAAW,6BAA6BxM,KAAKhD,EAAQ+U,UAAUC,UACnE,QACEpS,SKtvBNnG,MLuvBMoG,QAAS,UACT3E,KKpvBN4E,SAAAA,EAAAzH,EAAAsH,EAAAzG,GLmyBQ,QKruBRA,GAAA+Y,GAEA,GAAAC,QAAAA,OAAAC,GAAA,CLquBU,GKpuBVC,GAAAvM,MAAA5N,EAAA6T,UAAA,GAAA4D,MAAAyC,EAAA5C,WAAA8C,YAAA,KAAA,EAAA,IAAApa,EAAA6T,QLquBcmG,EAAapM,MAAM5N,EAAQ8T,UAAY,GAAI2D,MAAKyC,EAAW5C,WAAW8C,YAAY,KAAM,EAAG,IAAMpa,EAAQ8T,QKnuBvH7S,EAAAuV,GAAA0D,CLquBUjZ,GAAWoZ,aAAa,OAAQJ,GKjuB1ChZ,EAAAqZ,aAAAC,MAAAJ,GAEAlZ,EAAAiV,aAAAA,MAAAA,GAEAsE,ILmuBUvZ,EAAWuV,WAAa0D,IA+C1B,QAASO,KACP,OAAQxZ,EAAWuV,YAAc5I,MAAM3M,EAAWuV,WAAWc,WAAa,GAAK5C,EAAWzT,EAAWuV,WAAYxW,EAAQyT,YK71BnIjS,GAAAA,IACA0B,MAAA1B,ELsvBQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,WAAY,aAAc,aAAc,SAAU,gBAAiB,SAAU,WAAY,eAAgB,KAAM,cAAe,eAAiB,SAASI,GAC/XL,QAAQuR,UAAUrL,EAAK7F,MAAO7B,EAAQ6B,GAAO6F,EAAK7F,KK/uBhE,IAAA6Y,GAAAlG,eACAxU,SAAAA,SAAA0a,OAAA/K,YAAAA,YAAAA,YAAAA,gBAAAA,SAAAA,GAEAqG,QAAAhW,UAAAgW,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,MACAtB,EAAAA,IAAA,KAKAhN,IAAA1H,EAAAuT,WAAA3S,EAAA2S,aAAAvT,EAAAyT,WAAA,QL+uBQ,IK9uBRvQ,GAAAwE,EAAAtH,EAAAsI,EAAAC,EL+uBQ3I,GK9uBR0a,EAAAA,QL+uBQ,IK9uBR1E,GAAAxU,EAAAG,KACA+S,EAAAhM,SAAAwN,EAAAvB,EAAAjB,GL+uBU,MK9uBVgH,GAAA/T,WAAAA,EAAAA,EAAAA,EAAAA,GLgvBYe,GK9uBZgT,QL+uBUxX,EAAMsF,OAAOd,EAAK0L,OAAQ,SAAS1K,EAAUC,GACtC+R,GAAelZ,QAAQuR,UAAUrK,KAClClH,QAAQG,SAAS+G,KAAWA,IAAaA,EAAS2K,MAAM,2BK3uBxEsH,KAAAC,EACAjG,EAAA3U,OL8uBc0a,EAAW5T,SAIjB,IAAI6T,GKzuBZhL,GL0uBUgF,OKzuBV3U,EAAA0a,WL0uBU1E,KKzuBV6E,GL2uBQrZ,SAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQuR,UAAUrL,EAAK7F,KKtuBrCqB,EAAAsF,SAAAC,EAAAA,SAAAC,GAEAgS,EAAAzU,SAAAhF,GAAAuV,EAAAA,oBAAAA,EAAAA,GACA5I,MAAA8M,EAAA/K,SAAA9N,KAAA6Y,EAAAnD,SAEAsD,EAAAA,EAAAX,gBLyuBQhX,EKruBR+W,OAAAA,EAAAE,QAAAA,SAAAH,EAAAA,GACA/Y,EAAAoZ,OAAAA,EAAA7D,cACAvV,GLmvBQA,EK7tBRiZ,SAAAA,QAAAA,SAAAA,GL8tBU,GK7tBVjZ,EL8tBU,KK3tBVuZ,EAEAK,ML0tBY5Z,GAAWoZ,aAAa,QAAQ,GK1tB5CQ,IL6tBU,IK1tBV3E,GAAAyE,QAAAG,OAAAA,GAAAZ,EAAAla,EAAA0T,MAAA8G,EAAAvZ,EAAAuV,WL2tBU,QK1tBV0D,GAAAxF,MAAAwB,EAAAvC,YL2tBY1S,EAAWoZ,aAAa,QAAQ,GKztB5CM,IL4tBUE,EK1tBVvD,GACA9D,WL0tBcxT,EK1tBdA,UACAkW,EAAAA,EAAAoB,qBAAA4C,EAAAla,EAAA0T,UAAA,GACAgB,EAAAlB,EAAAA,EAAAG,iBAAA3T,EAAAyT,cL4tBUyC,EAAOyE,EAAWG,qBAAqB7Z,EAAWuV,WAAYxW,EAAQ0T,UAAU,GKztB1FwC,WAAAlW,EAAAyX,SL2tBmBvB,EAAKoB,UKvtBxB,SAAAlO,EAAAA,SAEA8M,EAAAA,UAAAA,IACA5M,QAAA9H,EAAAoF,SACAmU,EAAAA,cAEA7E,GAAA5M,MAAAA,OLytBQrI,EKvtBR0Z,YAAAK,KAAA1R,SAAAA,GLwtBU,GAAI4M,EAaJ,OAXEA,GKxtBZA,QAAAtP,YAAA0C,IAAA,OAAAA,EACAyR,IACAvZ,QAAA8H,OAAAA,GLwtBmBA,EKptBnBqR,WAAAnE,EAAAA,SACAiE,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,iBLstB0C,SAArBza,EAAQwT,SKltB7BtN,GAAAA,MAAA,IAAAA,GLqtBmB,GAAIuR,MAAKnO,GK/sB5BrI,EAAAA,WAAAuV,EAAA5I,qBAAA4I,EAAAc,EAAAA,ULktBiBmD,MAETxZ,EK/sBRyZ,QAAAA,WACA1a,EAAAA,IAAAya,MLotBQvX,EAAM0G,IAAI,WAAY,WMxxC9BnJ,GAAAia,EAAAjR,UAIA7I,EAAAG,KACAF,EAAA,YN2xCEW,QMrxCFP,OAAAA,yBAAAgD,SAAAsB,OAAAsB,WNsxCI,GMrxCJjG,GAAAG,KAAAA,UAGAka,UAAAtL,UACAnO,SAAAC,mBNoxCMyZ,SMnxCN1Z,WNoxCM2Z,YAAa,UM/wCnB5V,EAAA6V,KAAAA,WAAAzL,SAAAwL,EAAAA,EAAAA,GAEAF,GAAAA,GAAAI,IAKAJ,GAAAK,SAAAA,QAAAA,KAAAA,GAEAL,QAAAM,SAAA,YAAAC,WAAAA,eAAAA,SAAAA,GACAha,QAAAoF,UAAAA,EAAAyU,MAAAI,EAAAA,SAAA5Z,GAAA6Z,EAAA7Z,MN6wCM0D,EAAOoW,UAAYV,EAAKtL,SAASuL,SACjC3V,EM3wCN8V,aAAAG,EAAAA,SAAAA,YN4wCMP,EAAKI,OAAS9V,EAAO8V,UMzwC3BJ,EAAAW,2BAAAJ,EAAAA,wBN2wCMP,EM1wCNM,MAAA5V,SAAA0V,GACAQ,QAAAA,YAAAR,EAAAI,OAAAA,UACAlW,EAAAuW,WAAAA,EAAAA,MAAAA,GN4wCQb,EM1wCRa,OAAAA,KAAAb,IN4wCMA,EAAKW,QM1wCXC,SAAAA,GN2wCQ,GAEIC,GAFAnW,EM1wCZsV,EAAAI,OAAAU,QAAAP,GACAM,EAAAA,EAAAb,OAAAI,OAMAS,GAFAb,QAAAe,SAAArW,GAEAmW,EAAAA,OAAA9L,IAAA,SAAAwL,GAGAM,MAAAA,GAAAA,ONswCaC,QMrwCbpW,GNuwCwBsV,EAAKI,OAAOI,QAE5BR,EMnwCRA,OAAAgB,OAAAhB,EAAAI,GACAS,ENmwCYnW,EMlwCZsV,INowCmBtV,IAAUmW,GAAeA,IAAgBb,EAAKI,OAAOjV,QAC9D0V,IMhwCVb,GAAAQ,GAAA/Z,EAAAA,EAAAA,OAAAA,OACAuZ,EAAAK,WAAAA,EAAAA,OAAAA,GAAAY,MAAAC,GNowCUlB,EAAKgB,cAGThB,EMjwCNgB,WAAAZ,EAAAI,WAAAW,SAAAnB,GNkwCQA,EAAKI,OAAOI,QAAU/Z,EACtBuZ,EAAKK,2BAA2B7Z,QAAQ,SAAS0a,GM9vCzDxX,OAGA0X,EAAApb,UAAAA,EAAAA,UAAAA,SAAAA,EAAAA,GACA,MAAAob,GAAAA,OAAAA,UAAAA,EAAAA,MAAAA,EAAAA,OAAAA,UAAAA,GAOAtb,MAAAH,KAAAA,WAEA,GAAAyb,KAGAnZ,OAFA0E,GAAAA,SAAAhH,EACA0b,EAAAA,WAAArb,EACAob,KN4vCK9U,UM1vCLxH,UAAA,UAAA2H,WAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GN2vCI,GM1vCJ9G,GAAA8G,EAAAnH,QN2vCI,QMzvCJ0C,SAAA,WAAAwE,UN2vCM6U,YMzvCNC,EN0vCMrZ,OMzvCNsZ,EN0vCMvb,YMtvCNsb,SAAA,WAAA,SAAAF,EAAApb,YNuvCMlB,YMpvCNyc,SAAAlB,EAAAA,GNqvCQ,MMpvCRiB,GAAAA,UAAAxT,EAAAyT,UNsvCMvZ,KMlvCNsZ,SAAAnT,EAAAC,EAAAoT,EAAAnT,GNmvCQ,GMjvCRkT,GAAAP,EAAA3S,GACAkT,EAAAlT,EAAAA,EN2vCQ,IATIiT,IACFC,EAAWlB,2BAA2BjS,KAAK,WM9uCrDoT,EAAAC,cAAAF,EAAAnB,OAAAI,WAMAe,EAAAlB,YAAAA,KAAAA,SAAAjS,GN6uCY,MM5uCZsT,GAAAA,WAAAC,GN4uCmBtT,KAGPmT,EMzuCZC,aAAA,CN0uCU,GAAIC,GAAqBE,EAAOJ,EAAMC,aACtCF,GAAWlB,2BAA2BjS,KAAK,WACzCsT,EAAmBC,OAAO1Z,EAAOsZ,EAAWnB,OAAOI,WMnuC/DvY,EAAAsF,OAAAiU,EAAAC,aAAA,SAAAhU,EAAAC,GACAf,EAAAqU,WAAAvT,KACA,SNyuCOnB,UM/tCP2L,UAAA,UAAA,WAAAvK,OAAAA,SAAAA,EAAAA,EAAAA,GNguCI,OACEf,SAAW,YAAa,WACxB1E,OM7tCNA,EN8tCMD,KM3tCNuZ,SAAA7M,EAAA9O,EAAA4b,EAAAK,GAwBAC,QAAAA,KNqtCU,GAAIpX,GAAQ6W,EAAWnB,OAAOU,QAAQ7Y,EACtC2O,GAAS2K,EAAWQ,UAAU9Z,EAAOyC,GAAS,WAAa,eAAevF,EAASoc,EAAW7M,SAASwL,aAlBzG,GM3tCR/a,GAAAoR,EAAAgL,EN4tCQpc,GAAQoR,SAAS,YMztCzBiL,EAAAvJ,SAAA,QAAA,SAAAxK,EAAAA,GACAxF,EAAA6U,MAAAA,EAAA7U,YAAAwF,KAIA8T,EAAAA,KAAAjB,EAAArY,KAGAA,EAAAyM,SAAA9O,WACA2b,EAAAA,SAAAZ,EAAA1Y,SAAAA,WAGAuZ,EAAAvJ,SAAA6J,WAAAA,SAAAA,EAAAA,GACA7Z,EAAAyC,SAAA6W,EAAAnB,MAAAA,KNutCQmB,EAAWjB,MAAMrY,GMntCzBsZ,EAAAA,IAAAA,WAAAlB,WACAyB,EAAAA,QAAAA,KC9LAvb,EAAA8Z,2BAAAjS,KAAA,WAIAzI,MAEA6Q,SPy5CEjQ,QOr5CFwC,OAAA,yBAAA,yBAAA,wCAAAC,SAAA,UAAA,WPs5CI,GOr5CJC,GAAAnD,KAAAH,UACAuD,UAAA,UACAxB,YAAA,SACAyB,YAAA,UACA6Y,UAAA,cACAC,YAAAA,yBACAC,QAAA,QACAC,WAAA,EACAC,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,UAAAA,EACAC,gBAAA,EACAC,MAAAA,EPs5CMN,UAAW,oCOn5CjBrc,YAAA,gCAGAuc,QAAA/I,MACAgJ,SAAAjT,OAEAkT,UAAAG,EPk5CMF,cOh5CN7X,WPi5CM8X,cO94CN1d,yBPg5CIe,MO74CJ4D,MAAAzB,UAAAqC,YAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GPg5CM,QO54CNrC,GAAAuC,EAAAA,EAAAA,GP64CQ,GAAIG,MO34CZ1C,EAAAuC,QAAAA,UAAA7E,EAAAyE,EP64CQO,GAAUX,EAAS7E,EAASJ,EO34CpCkD,IAAAA,GAAA0a,EAAA5d,MACAkD,GAAA2a,YACA3a,EAAA4a,SACA5a,EAAA6a,gBAGA7a,EAAA8a,aAAA,GP64CQ9a,EO34CR0C,YAAAJ,EAAAG,SP44CQzC,EAAM2a,oBAAsB7d,EAAQkd,gBAAkBld,EAAQid,SAC9D/Z,EAAM4a,eAAiB9d,EAAQ0d,cOz4CvCxa,EAAA0C,SAAA5F,EAAA2F,QP24CQzC,EO14CRA,UAAAoC,EAAAiY,SP24CQra,EO14CR0C,UAAAF,SAAAC,GP24CUzC,EAAMoC,aAAa,WACjBM,EAAQJ,SAASG,MAGrBzC,EAAM0C,QAAU,SAASD,EAAOE,GOv4CxC3C,EAAA8Z,aAAA,WACApX,EAAAA,OAAAoX,MP24CQ9Z,EOv4CR6C,WAAAwF,WPw4CU,MOv4CVrI,GAAA8Z,cPy4CQ9Z,EAAM8Z,UAAY,SAASrX,GACzB,MAAOC,GAAQoX,UAAUrX,IOp4CnCzC,EAAA+a,WAAAA,WACA,IAAA,GAAA1S,GAAA,EAAAA,EAAArI,EAAAkC,SAAAgB,OAAAmF,IACArI,EAAA8Z,UAAAzR,IACArI,EAAA0C,QAAA2F,IAOA3F,EAAAA,YAAA,WACA1C,IAAAA,GAAAkC,GAAAA,EAAAA,EAAAU,EAAAA,SAAAA,OAAAA,IACAF,EAAAsY,UAAAA,IPo4Cchb,EAAM0C,QAAQ2F,IAIpB3F,EOl4CR1C,OAAAuC,SAAAuW,GPm4CU9Y,EAAMkC,SOl4ChBU,EPm4CUF,EOl4CV1C,sBPo4CQ0C,EOl4CR5F,SAAAmd,SAAA1X,GP+4CU,MO/4CVzF,GAAAme,UPo4CgBvY,EAAQoX,UAAUrX,GACpBzC,EOp4CduC,aAAAuW,OAAA9Y,EAAAuC,aAAAsW,QAAApW,GAAA,GPs4CczC,EAAMuC,aAAa4D,KAAK1D,GAEtB3F,EAAQmd,MAAMja,EAAMuC,aAAa0X,KAAK,SAASgB,EAAGC,GOl4ClExY,MAAAF,GAAA0Y,KAGAxY,EAAAA,aAAAD,EAEA1E,EAAAA,cPq4CQ2E,EAAQF,OOn4ChB,SAAAC,GPo4CU,GAAIjE,GAAQwB,EAAMkC,SAASO,GAAOjE,KAClCwB,GOn4CVmb,OAAAnb,WPo4CY0C,EAAQJ,SAASG,GACb3F,EOn4ChBid,SACAhc,EAAA8H,cAAArH,EAAAA,aAAAA,IAAAA,SAAAA,GAEAkE,MAAAA,SAAAkB,YAAAA,EAAAA,SAAAA,IPm4CyB,KO/3CzB9G,EAAAA,SAAAH,GAAA6B,UAMA1B,EAAAid,cAAAvb,GACAkE,EAAApE,UPi4CU0B,EAAMiD,MAAMnG,EAAQH,YAAc,UAAW6B,EAAOiE,EAAOC,IAE7DA,EO93CR1C,mBAAAuC,WP+3CczF,EAAQid,SACNzb,QO93ChB8c,QAAArd,EAAA2H,aACA1F,EAAA1B,aAAAP,EAAA2H,YAAAA,IAAA1F,SAAAkC,GACAlC,MAAAuC,GAAAA,UAAAG,KPi4Cc1C,EAAMuC,gBO13CpBM,QAAAA,UAAA9E,EAAA2H,cAAA1F,EAAAkC,SAAAgB,OACAlD,EAAAlD,aAAAqE,EAAApD,UAAAA,EAAA2H,aP+3Cc1F,EAAMuC,aAAe,IAI3BG,EO33CR5F,WAAAid,WP43CU,MO33CVjd,GAAAkD,WAAAuC,EP83CiBvC,EAAMkC,SAASgB,QAAUnF,EAAW+H,WAAW5C,QAAUpG,EAAQqE,UAF/DnB,EAAMkC,SAASgB,QAI1BR,EO13CRD,UAAAA,SAAAA,GACA,MAAA3F,GAAA2F,SACAjE,KAAAF,EAAA6E,aAAAjB,QAAAO,GAEAA,EAAAA,eAAAA,GAGAC,EAAAU,UAAAA,SAAA5E,GAEAmE,GAAAU,EACAV,KAAAW,EAAAA,EAAAA,SAAAA,OAAAA,MAEA8D,QAAAjE,OAAAnD,EAAAkC,SAAAO,GAAAjE,MAAAA,KPy3CU,MOv3CVmX,IPy3CQjT,EAAQU,aAAe,SAAST,GOl3CxC,GAHAD,EAAAA,iBACAC,EAAAW,kBAEAX,EAAAY,CACAZ,GAAAU,GAAAA,QAAAA,QAAAA,EAAAA,OACAV,GAAAW,eAAAA,WPw3CQZ,EOn3CRmB,WAAAD,SAAAA,GPo3CU,MAAK,eAAeiB,KAAKlC,EAAIY,UOh3CvCwW,IAAApX,EAAA7F,UACA6F,EAAAU,iBPk3CYV,EAAIW,mBO72ChBxG,EAAAyG,UAAAhB,IAAAI,EAAA3C,QAIAwD,EAAAA,OP82Ce1G,EAAQid,UAA6B,KAAhBpX,EAAIY,SAAkC,IAAhBZ,EAAIY,aOx2C9DzG,EAAA+b,WP42CgC,KAAhBlW,EAAIY,SAAkBvD,EAAMuC,aAAe,EAAGvC,EAAMuC,eAAyC,KAAhBI,EAAIY,SAAkBvD,EAAMuC,aAAe,EAAGvC,EAAMuC,aAAevC,EAAMkC,SAASgB,OAAS,EAA4B,KAAhBP,EAAIY,SAAkBvD,EAAMuC,aAAevC,EAAMkC,SAASgB,OAAS,EAAGlD,EAAMuC,eAAyBjE,QAAQoF,YAAY1D,EAAMuC,gBAAevC,EAAMuC,aAAe,GOz2CvWG,EAAA2Y,YALAC,EAAA9Y,OAAAxC,EAAAuC,ePk2CU,QAgBFG,EO12CR6Y,MAAAA,WP22CU,GO12CV5U,GAAAA,EAAAmH,UAAAA,SP22CU,OAAO0N,GAAG3C,QAAQ,SAAW,GAAK2C,EAAG3C,QAAQ,YAAc,GAAK2C,EAAG3C,QAAQ,SAAW,GOr2ChGnW,EAAAgU,iBAAAjT,SAAAA,GACA,OAAAf,EAAA,GAAA+Y,cAAAC,UACAhF,EAAAA,iBACAiF,EAAA7e,2BACA4F,EAAAA,OAAAiB,SP02CQ,IOr2CRjB,GAAAiB,EAAAA,IPs2CQjB,GOr2CR5F,KAAAA,WPs2CU4Z,IACI5Z,EAAQid,UACVrX,EOr2CZiB,SAAA2K,SAAA,mBAGArM,EAAA0U,WACAjU,EAAAkB,SAAAmE,GAAAX,EAAA,aAAA,YAAA1E,EAAAU,cACAtG,EAAAid,UACA/Z,EAAAuC,GAAAA,UAAAG,EAAAmB,aAEAnB,GAAAA,GPs2CQ,IOp2CRxF,GAAAkL,EAAAxE,IAoBA,OPi1CQlB,GAAQkB,KAAO,YOn2CvB+S,EAAAoD,UAAAzb,QAAAoF,YAAA3F,EAAA2H,ePq2CY1F,EAAMuC,aAAe,IAEvBG,EAAQiB,SAASyE,IAAIhB,EAAU,aAAe,YAAa1E,EAAQU,cOh2C7EqX,EAAA/c,UACAR,EAAAud,IAAAA,UAAAA,EAAAA,YAMApW,GAAA,IAIA3B,EPsqCM,GO54CN1C,GAAAkC,6BAAAA,KAAAA,EAAAA,UAAAA,WACAkF,EAAA2S,eAAAlY,GAAAkI,UAAAsH,CAwOAtR,OADA2E,GAAAhH,SAAAA,EACA+c,MP61CKpW,UO11CLrE,YAAAA,UAAAA,SAAAA,KAAAA,UAAAA,gBAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GP21CI,GAAItC,GO31CRyc,EAAAzc,QP41CI,QACE+G,SO51CNlG,MP61CMmG,QO51CNpG,UP61CMyB,KAAM,SAAkBC,EAAO9C,EAASsH,EAAMzG,GOz1CpD,GAAA4G,IACArG,MAAAC,EACA4b,YAAAtK,EAAArL,YP41CQlG,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,WAAY,OAAQ,YAAa,cAAe,iBAAkB,YAAa,gBAAiB,UAAW,WAAY,gBAAiB,YAAa,KAAM,OAAQ,YAAa,cAAe,eAAiB,SAASI,GAC5UL,QAAQuR,UAAUrL,EAAK7F,MAAO7B,EAAQ6B,GAAO6F,EAAK7F,KOr1ChE,IAAAL,GAAAsd,ePw1CQtd,SOv1CRqG,SAAAA,OAAAE,YAAA+W,iBAAA,QAAA,SAAAjd,GACA7B,QAAAid,UAAAvV,EAAA7F,KAAAgG,EAAAE,KAAAL,EAAA7F,MPw1CY7B,EOv1CZ6B,IAAA,IP01CQ,IAAIid,GAAe1e,EAAQsH,KAAK,gBOz0CxC,IAXAtH,QAAA2S,UAAA/H,KACA+T,EAAA3e,KAAAA,GACA2e,EAAA9Q,UAAA,EAEA8Q,EAAA5N,SAAA/Q,GAOAJ,WAAA0F,EAAAA,GAAAE,SAAAxF,cAAAJ,CAEA,GAAA0F,GAAA8Y,CACApe,GAAA6N,IAAA+Q,UAAAA,QPi1CU5e,EAAUoB,QAAQpB,QAAQ,2DO70CpC2e,EAAA3W,MAAAA,GPg1CQ,GO70CRJ,GAAAa,EAAA5H,EAAAA,WAEAyE,EAAAO,EAAAqC,EAAAA,EAAAA,EACArH,GAAAA,SP60CUb,EAAQ,GAAG4e,iBAAiB,OAAQtZ,EAAO6Y,iBOx0CrDrb,IAAAA,GAAAuF,EAAAF,OAAAG,GAAAA,QAAAC,OAAAA,IAAAA,MP20CQzF,GOz0CRwC,OAAAwY,EAAAA,SAAAA,EAAAA,GACAjd,EAAAiF,SAAAA,EAAAA,GAAAA,KAAAA,SAAAA,GACAR,EAAAO,OAAAqC,GAGArH,EAAAiF,cAGA,GPu0CQhD,EOt0CRlD,OAAAA,EAAAid,QAAAzb,SAAA8c,EAAArd,GPu0CUyE,EOt0CV6D,qBPu0CUtI,EOt0CV0E,YPu0CW,GACH1E,EOt0CRqD,QAAA9C,WPu0CU,GOt0CV+H,GACAA,CPu0CcvJ,GOt0Cdid,UAAAzb,QAAA8c,QAAArd,EAAA2H,cPu0CYW,EOt0CZA,EAAA0V,YAAAjP,IAAA,SAAAtO,GPw0Cc,MADAiE,GAAQD,EAAOwZ,UAAUxd,GOr0CvC,KAAAiE,EAAAD,EAAAH,OAAAH,SAAAO,GAAA+D,OAAA,IACA/D,OAAAD,QAAAwZ,WPw0Cc3V,EOv0CdA,EAAA5D,QAAA3F,EAAA0F,WAAAN,EAAAO,WPu0CyB4D,EAASnD,OAAS,KAAOpG,EAAQyd,eAAiB7c,EAAS6c,eAE3DlU,EAAS0V,KAAK,QOl0CvCtZ,EAAAjE,EAAAA,UAAA0E,EAAAwC;APs0CYW,EAAqB,KAAV5D,EAAeD,EAAOH,OAAOH,SAASO,GAAO+D,OAAQ,GOj0C5ExG,EAAAP,MAAA4G,EAAAA,EAAAvJ,EAAAqd,cAAArd,EAAAod,UAAApd,EAAAod,UAAAxc,EAAAwc,aAEApd,EAAAid,WACAvX,EAAAyZ,SAAA,SAAAzd,GPo0CY,OAAQA,GAA0B,IAAjBA,EAAM0E,SAG3BlD,EAAM0G,IAAI,WAAY,WQ1rD9BnJ,GAAAiF,EAAA+D,UAKA2V,EAAAre,KAEAH,EAAAG,YR2rDES,QQrrDFmD,OAAAA,4BAAA,kCAAA,sCAAA0a,SAAAra,aAAA2H,WRsrDI,GQprDJyS,GAAAE,KAAA9d,WACAZ,EAAAY,KAAAA,UACA+d,SAAAC,IAIAC,SAAAzU,IRkrDM4B,OQjrDN,IRmrDI7L,MQhrDJ4D,MAAA+a,UAAAA,YAAAra,aAAAA,aAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GRorDM,QQ9qDNsa,GAAAC,EAAAA,GACA,MAAAC,GAAAD,GAAAA,UAAAxf,EAAA,GAAAJ,SAAAqQ,gBAAAA,EAAAA,cRgrDM,QQ5qDN+O,GAAAU,GR6qDQ,GQ5qDR9f,GAAAof,QAAAS,UAAAA,EAAAA,ER6qDa7f,GAAQI,UAASJ,EAAQI,QAAUof,EQ1qDhD,IAAAO,GAAAA,EAAAA,EAAAA,QAAAA,QAGAC,EAAAA,EAAAA,EAAAA,EAAAA,QACAC,EAAAA,EAAAA,SAAAA,EAAAA,EACA,IAAAC,EAAAA,GAEA,MADAd,GAAAe,GAAAA,UACAC,EAAAA,EAEA,IACAC,GAEAC,EAOAvf,EAGAwf,EACAC,EACAb,EACAL,EACAK,EAjBAa,KAKArT,EAAAA,EAAAA,oBAEA4S,IA+JA9c,OR8gDQ8c,GQjqDRM,KAAAA,WACAL,KAAAA,QAAAA,EACAC,EAAAA,EAAAjb,KAAAA,cAAAhF,EAAAuf,UACAc,EAAAA,EAAAA,KAAAA,cAAAA,EAAAA,UAGAV,EAAAE,GAAAA,QAAA9e,KAAA0f,4BRgqDUnB,EQ/pDVO,GAAAA,SAAAE,GRgqDUJ,EAAS1U,GAAG,SAAUuV,GACtBH,EAAwBd,EAASxe,KAAK2f,aAAc1gB,EAAQuf,UQ5pDtEQ,EAAA/a,EAAA4E,IAAA,qBAAAyW,GAGAtf,EAAA+e,EAAAA,IAAAA,wBAAAA,GACAO,IACAR,IR4pDYT,EAAMS,GAAYE,IAGtBA,EQzpDRzU,QAAA,WACA0U,KAAAA,UACAC,KAAAA,QAAAA,IR4pDUN,EAASrU,IAAI,QAASvK,KAAK0f,4BAC3BnB,EAAShU,IAAI,SAAUiV,GQvpDjCR,EAAAY,IAAAA,SAAAA,GAGAX,IAGA7S,IAGAmT,SAGAnT,GAAAA,KRmpDQ4S,EQ9oDRxU,cAAA4U,WR+oDU,GQ9oDVA,EAAAvZ,OR8oDU,CAGA,GAFAuG,GQ9oDViT,EAAAD,EAAAA,YAAAR,EAAAtS,KAAA,eAAA,ER+oDUiT,EQ9oDVnT,KAAAgT,IAAAA,EAAA5U,YAAAqV,EAAAvT,KAAA,iBACAF,EAAAgT,EAAAhT,GAAAA,WAAAgT,IAAAA,EAAA,GAAAtW,OACA,MAAAkW,GAAAc,iBAAAV,EAAA5U,GRgpDU,KAAK,GAAIA,GAAI4U,EAAe/Z,OAAQmF,KQ3oD9CwU,IAAAA,QAAAU,YAAAA,EAAAlV,GAAAuV,YAAA,OAAAX,EAAA5U,GAAAuV,WAGAC,IAAAJ,EAAApV,GAAA1B,UR2oDgBsD,EAAYgT,EAAe5U,GAAGuV,WQtoD9Cf,EAAAc,EAAAA,IAAA1T,EAAA/M,EAAAA,EAAAA,GAAAA,WACA,MAAAggB,GAAAS,iBAAAV,EAAA5U,MR0oDQwU,EQvoDRpB,2BAAA,WRwoDUoC,WQvoDV/V,EAAA2T,cAAAqC,IRyoDQjB,EAAWc,iBAAmB,SAASzgB,GACrC,GAAIggB,EAAc,CAChB,GAAIzB,GAAgBoB,EAAWkB,mBAAmBb,EQtoD9DA,KACAhgB,EAAAoR,OAAAe,YAAA,UACAvH,EAAA5K,EAAA4gB,OAAAhW,OAAA5K,EAAA4gB,EAAA9P,OAAAA,SAAAA,SAAA,OACA9Q,EAAA8Q,OAAAA,SAAAM,SAAAe,YAAA,WAKA6N,EAAAF,EAAA5b,ORuoDUlE,EQtoDV4gB,OAAAnX,SAAAA,UACAmB,EAAA5K,EAAA4gB,OAAA,OAAAhW,EAAA5K,EAAA4gB,OAAA9P,SAAAA,SAAA,ORuoDY9Q,EAAQ4gB,OAAO9P,SAASA,SAASM,SAAS,WAG9CuO,EQloDRmB,mBAAAjU,SAAAkU,GRmoDU,MQloDVC,GAAAN,OAAAI,SAAAA,GACA,MAAAlhB,GAAAA,SAAAohB,IRmoDa,IAELrB,EQhoDRlT,aAAAiU,WRioDUtf,QQ/nDVC,QAAAye,EAAA9B,SAAAA,GACA,GAAA8C,GAAAJ,EAAAA,cAAAA,EAAAA,ORgoDYM,GAAeN,UAAYI,EAAgBvU,EAAWC,OAAOsU,GAAezU,IAAM,KQ7nD9F8T,EAAAA,QAAAA,OAAAA,EAAAA,YAAAA,EAAAA,WAAAA,EAAAA,EAAAA,UAIAR,EAAAsB,EAAAxX,OAAAA,SAAAmX,GACAd,MAAA7W,QAAA6W,EAAAA,YAAArW,KAAAA,SAAAA,EAAAA,GAAAmX,MAAAA,GAAAA,UAAAA,EAAAA,YRgoDUT,KAEFR,EQ9nDRuB,aAAAA,SAAAA,EAAAA,GACApB,EAAAA,MACArW,OAAAqW,ER+nDYc,OQ9nDZM,KRioDQvB,EAAWwB,eAAiB,SAAS1X,EAAQmX,GAE3C,IAAK,GQ/nDfd,GR+nDmB3U,EAAI2U,EAAgB9Z,OAAQmF,KQ5nD/CwU,GAAAA,EAAAxU,GAAA1B,SAAA0B,GAAAA,EAAAA,GAAAA,SAAAA,EAAAA,CACA2U,EAAAA,CR8nDc,OAGJA,EAAkBA,EAAgBlE,OAAOsF,EAAU,IAErDvB,EAAWva,SAAW,SAAS+F,GQnnDvChE,EAAAgE,GAAAiG,SAAA,WAGA7J,EAAAkJ,OACAkP,ERm/CM,GQ9qDNT,GAAAtf,QAAAwB,QAAAS,GACA2e,EAAA5gB,QAAAI,QAAAJ,EAAAI,KAAAof,oBACAA,EAAAI,QAAA5U,QAAAhL,EAAAI,SAAAgN,KR8yDM,OQnnDNlK,ORqnDKqE,UQpnDL/F,eAAA,aAAA,WAAAK,aAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GRqnDI,OACE8F,SAAU,MACV1E,KQnnDNue,SAAAzB,EAAA/f,EAAAA,GACAwhB,GAAAA,IAEAte,MAAA0G,ERonDQpI,SQlnDRggB,SAAAD,SAAAA,UAAA1X,SAAAzJ,GACAohB,QAAA/X,UAAAA,EAAAA,MAAAA,EAAAA,GAAAA,EAAAA,KRonDQ,IQlnDRzJ,GAAA+f,EAAA/f,ERmnDQwhB,GQlnDRA,aAAAxhB,EAAA6J,OAAAzJ,GRmnDQ8C,EAAM0G,IAAI,WAAY,WAChB4X,IACFA,EAAUD,eAAevhB,EAAQ6J,OAAQzJ,GQ5mDrDmH,EAAAkC,WAGA9B,EAAA,KACA3G,EAAA,YRgnDOuG,UQ5mDPka,mBAAA,aAAA/Z,WAAA,aAAA+Z,aAAA,SAAAzc,EAAAua,EAAA5S,EAAAoT,GR6mDI,OACEpY,SAAU,IACV3G,QAAS,SAAkBZ,EAASsH,GAClC,GAAInE,GAAWnD,EAAQ,GAAGwS,iBAAiB,eSx2DnDpR,SAAAf,QAAA8C,EAAA,SAAAme,GAIA9gB,GAAAA,GAAAA,QAAAA,QAAAA,EACAC,GAAAqQ,SAAAxJ,KAAA,eAAA,IAAAA,KAAA,cAAA+Z,EAAA/Z,KAAA,gBT22DElG,QSn2DFzB,OAAAA,0BAAA,2BAAAkE,SAAA,WAAA,WTo2DI,GSn2DJxB,GAAAA,KAAA7B,UACAoD,UAAA,UACAG,YAAA,GACAxB,WAAA,EACAoH,QAAA,EACA4X,UAAA,QACAvd,YAAA,2BACA6F,iBAAA,ETo2DMjG,QAAS,QSj2DfjD,UAAA4D,EAEAhC,MAAA,ETk2DMoH,MS/1DN/J,GTg2DM2hB,QS91DNC,GT+1DMxd,MS51DNpE,ET61DMiK,WS51DN2X,ET81DI7gB,MS31DJ4D,MAAAid,WAAAA,SAAAA,GT41DM,QAASC,GAAezhB,EAASiF,GSx1DvC,GAAArF,GAAA6hB,QAAAA,UAAAA,EAAAA,GT01DYD,EAAW3c,EAAS7E,EAASJ,ES/0DzC2H,OALAJ,GAAAoa,UAEAG,EAAAA,OAAAA,QAAA/c,EAAA+c,SAGAna,EAEA1E,MAAA4e,OTq1DKta,USj1DLvH,aAAAA,UAAAA,OAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GTk1DI,GAAI8hB,GSl1DR5e,EAAAA,uBAAAA,EAAAA,UTm1DI,QACEyE,SSn1DNlG,MTo1DMyB,OSn1DN,ETo1DMD,KAAM,SAAkBC,EAAO9C,EAASsH,GSh1D9C,GAAAG,GACArG,GACA0B,MAAA1B,EAIAA,SAAAwR,SAAA5S,WAAA,cAAA,aAAA,eAAA,kBAAA,YAAA,YAAA,QAAA,UAAA,OAAA,YAAA,cAAA,YAAA,KAAA,cAAA,eAAA,SAAAyB,GACAL,QAAAuR,UAAAC,EAAAA,MAAAhT,EAAA6B,GAAA6F,EAAA7F,KTi1DQ,IS/0DR7B,GAAA,eTg1DQwB,SAAQC,SS/0DhB,OAAA,YAAA,aAAA,SAAAI,GACA7B,QAAA6J,UAAAmJ,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,IAAAA,ITi1DQ,IAAIA,GAAa5S,EAAQsH,KAAK,cS50DtClG,SAAAC,UAAAuR,KACAtL,EAAAK,KAAAiL,GACAtL,EAAAwL,QAAArR,ET+0DY7B,ES70DZwB,OAAAuR,GTg1DQvR,QAAQC,SAAU,QAAS,WAAa,SAASI,GAC3C6F,EAAK7F,IACP6F,EAAKwL,SAASrR,EAAK,SAAS6G,EAAUC,GACpCzF,EAAMrB,GAAOqO,EAAKC,YAAYzH,GAC1BlH,QAAQuR,UAAUpK,IS10DpCjB,EAAA,WACAc,GAAAuZ,EAAAnQ,wBAMAlK,EAAAlG,WT40DU0B,ES30DV4e,OAAAA,EAAAA,UAAA,SAAApZ,EAAAC,GACAnH,QAAAwgB,SAAAA,GT40DcxgB,QAAQS,OAAOiB,EAAOwF,GSz0DpCxF,EAAAye,QAAAjZ,EAIAhB,QAAA0L,UAAAzK,IACAzF,EAAA,WACA8e,GAAAxgB,EAAAuR,sBT40Da,GAEDrL,ESz0DZsa,QT00DU9e,EAAMsF,OAAOd,EAAK0L,OAAQ,SAAS1K,EAAUC,GACtCqZ,GAAYxgB,QAAQuR,UAAUrK,KAC/BlH,QAAQG,SAAS+G,KAAWA,IAAaA,EAAS2K,MAAM,wBSt0DxE3L,KAAA,EACAxE,EAAAsF,OAEAwZ,EAAA1O,UAQApQ,EAAA0G,UACA1G,EAAA8e,OAAAA,EAAAA,SAAAvY,SAAAA,GACAzJ,GAAAwB,QAAAuR,UAAArK,IACAsZ,EAAA1O,YAAA5K,KTs0DQsZ,EAAUJ,EAASxhB,EAASJ,GAC5BkD,EAAM0G,IAAI,WAAY,WUj9D9BnJ,GAAAuhB,EAAAvY,UAIA7I,EAAAG,KACAoa,EAAA,YVo9DE3Z,QU98DFf,OAAA,4BAAAwD,SAAA,UAAA,WV+8DI,GU/8DJrD,GAAAA,KAAAA,UVg9DMua,YAAa,SACb8G,UAAW,mBU58DjB1a,QAAAA,EAIAxG,MAAA4D,KAAA,WACAgD,OACA1E,SAAArC,MV88DK2G,UUz8DL/F,YAAAuR,UAAAlR,YAAAA,UAAAA,SAAAA,EAAAA,EAAAA,GV08DI,GAAIjB,GAAWshB,EAAQthB,QACvB,QACE+G,SUt8DN,IVu8DM1E,KUr8DN,SAAA0F,EAAAA,EAAAA,EAAAA,GVs8DQ,GUp8DR3I,GAAAmiB,QAAA/hB,KAAAQ,EVq8DQY,SUn8DRA,QAAAC,OAAA0gB,KAAAA,GAAAC,SAAAA,GAEA5gB,QAAA6gB,UAAA7gB,EAAApB,MAAAgiB,EAAAA,GAAAA,EAAAA,MVo8DQlf,EUl8DRsF,OAAAxI,WVm8DU,MUl8DVsiB,GAAAC,QVm8DW,SAAS7Z,EAAUC,GACpB,GUl8DVwZ,GAAA/hB,EAAAoiB,GAAAF,iBAAA,MAAAtiB,EAAAiiB,UAAA,IVm8DUzgB,SUj8DVihB,QAAA1a,EAAAW,SAAA0Z,GVk8DY,GUj8DZC,GAAA7Q,QAAAxR,QAAAmb,GVk8DgBmH,EUj8DhBD,EAAA3a,KAAA1H,EAAAiiB,WAAApf,QAAA,IAAA,MACAwf,GAAA9P,SVk8Dc+P,EAAU,IAAMA,EAAU,IAE5B,IAAIG,GAAS,GAAID,QAAOF,EAAS,IAC7BG,GAAO1a,KAAKW,GACd2Z,EAAU7Q,SAASxR,EAAQmb,aWz/DzCzJ,EAAAgR,YAAAlhB,EAAAkQ,sBXkgEMlQ,QWh/DNkQ,QAAAgR,MAAA,GAAAlhB,QAAAkQ,QAAAiR,IAAA,IXi/DInhB,QWh/DJohB,OAAAA,MAAAA,QAAAvS,SAAAA,UAAAA,WAAAA,SAAAA,EAAAA,GXi/DM,GAAIyR,GAAwB/c,EAAQ+c,uBAAyB/c,EAAQ8d,6BAA+B9d,EAAQ+d,yBW9+DlHF,EAAAzG,EAAAA,sBAAAA,EAAAA,4BAAAA,EAAAA,yBAAAA,EAAAA,kCACA4G,IAAA5d,EACA6d,EAAAD,EAAA,SAAA5G,GXg/DQ,GW/+DRhX,GAAAA,EAAA8d,EXg/DQ,OAAO,YACLL,EAAqBvS,KW3+D/B,SAAA2S,GX8+DQ,GAAIC,GAAQ9d,EAASgX,EAAI,OAAO,EAChC,OAAO,YY9gEf1b,EAAAyiB,OAAAD,IAQAliB,OZ0gEMiiB,GAAIG,UAAYJ,EY1gEtBpe,KZ8gEEnD,QYvgEFf,OAAAT,0CAAAqF,SAAAA,gBAAAA,WZwgEI,GYvgEJ4C,GAAAA,KAAAmb,UZwgEMX,OYrgENpP,+KZugEItS,MYrgEJ4D,MAAA0e,SAAAA,KAAAA,SAAAA,EAAAA,GZsgEM,QYpgENC,GAAAA,EAAAA,GZsiEQ,QY5/DR5hB,GAAAwB,EAAA5B,GZ6/DU,MY5/DVgH,GAAA0H,IAAA,SAAAqD,EAAA1N,GZ6/DY,GY7/DZjE,GAAAiE,EAAA+D,IAIAzB,OZ4/DY3G,GAAO+hB,GAAahQ,EACpB3J,EAAQ6Z,EAAUrgB,EAAO5B,GACzBI,EAAQ8hB,EAAQtgB,EAAO5B,IY7/DnCoI,MAAAzB,EZggEcvG,MAAOA,EY5/DrB+hB,MAAAA,KAnDA,GAAAC,MAEAF,EAAAA,QAAAA,UAAAA,EAAAA,EACAvb,GAAAY,UAEAZ,IAAAA,GACAA,EACAsb,EACAF,EACAC,EACAI,EACAF,CCxBAxY,Ob2hEQ/C,GYlgER4U,KAAAxJ,WZmgEUpL,EAAcM,OAAS8K,EAAQ3L,EAAK2L,MAAMrT,EAAQyiB,QYhgE5Dxa,EAAAY,EAAAA,EAAA,IAAAwK,EAAAnQ,IACAmgB,EAAAlhB,EAAA0G,IAAA3F,EAAAA,GZkgEUogB,EYhgEV9hB,EAAA8c,GZigEUoF,EYhgEVpb,EAAAA,EAAAA,IAAAA,IZigEUkb,EAAU3G,EAAOxJ,EAAM,GAAKA,EAAM,GAAKgQ,GACvCxa,EYhgEVZ,EAAAmb,EAAAA,KZkgEQnb,EAAcY,SAAW,SAAS3F,EAAOjC,GACvC,MAAOmB,GAAGD,KAAK0G,EAAS3F,EAAOjC,IAAad,KAAK,SAASmI,GAKxD,MYngEZL,SAAAiB,QAAAA,KACAhG,MAEA+E,EAAAsb,QAAArgB,EAAAA,OAAAA,EAAAA,EAAAA,MZggEmB+E,EAAcmb,WAGzBnb,EY5/DR3G,aAAAA,SAAAA,GZ6/DU,GY5/DV4B,KZ8/DU,OADAA,GY5/DVxB,GAAAA,EACAJ,EAAA+hB,IC3DAlH,EAAAA,OAOAnR,EbokEM,MAAOyY,OAGXjiB,Qa3jEFpB,OAAAA,wCAAAujB,QAAA,aAAA,Wb0pEI,QaxgEJC,GAAAC,GbygEM,GAAIA,GAAazjB,EAAQ0jB,ca//D/BtX,EAAApM,EAAAA,cAAA2jB,CACA,IAAAriB,EAAAtB,EAAAiO,aAAAA,MAAAA,GAAAA,eACA,MAAA0V,IAAA/Y,EAAA4Y,EAAA,SAAA,WAAAzH,EAAAlO,IAAA2V,EAAA,aACAliB,EAAAuM,EAAA2V,YbkgEM,OahgENliB,IAAAtB,EAAA8M,gBb25DI,Ga3jEJxL,Mb4jEQsJ,Ea3jERgZ,EAAAA,SAAAC,SAAA7jB,EAAA8b,Gb4jEM,Ma3jENxa,GAAAsiB,UAAAC,EAAA7jB,SAAAiN,gBAAAA,EAAAA,cbkrEI,OArHA8O,GAAGlO,Ia3jEPvM,SAAAtB,EAAAiN,EAAAA,Gb4jEM,GAAI3L,EAQJ,OANEA,Ga5jERtB,EAAA8jB,ab4jEgB9jB,EAAQ+jB,aAAa9W,GanjErC2W,EAAAC,iBACAG,EAAAhkB,iBAAAgM,GAAAA,GAEAhM,EAAAikB,MAAAhX,GAEAb,KAAA4X,EAAA5X,WAAApM,IAAAiO,EAAAA,GbsjEI8N,EAAGvP,OapjEPwX,SAAA1X,GbqjEM,GAAI0X,GAAUhkB,EAAQgM,wBAClByX,EAAazjB,EAAQ0jB,aa1iE/B3H,QACA5P,MAAA+X,EAAAA,OAAAA,EAAAA,YACA9X,OAAA+X,EAAAA,QAAAA,EAAAA,aACA9X,IAAA+X,EAAAA,KAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,EAAAA,gBAAAA,WAAAA,GACA9X,KAAA+X,EAAAA,MAAAA,EAAAA,aAAAA,EAAAA,gBAAAA,aAAAA,EAAAA,gBAAAA,YAAAA,Kb8iEItI,Ea3iEJtO,UAAA6W,SAAAA,EAAAA,EAAAA,GACA,GAAAlX,GACAmX,EACA3W,EAGAR,EACApN,Eb0iEUwkB,EaviEVC,EACAL,EAAAvW,EAAAA,IAAA7N,EAAA,YACAwkB,EAAAzI,QAAA/b,QAAAA,GACAskB,IAKAA,YAAAA,IACAJ,EAAAA,MAAAnI,SAAA3O,YbsiEMqX,EapiENP,EAAAA,OAAAA,GbqiEME,EapiENrI,EAAAlO,IAAA7N,EAAA,ObqiEMwkB,EapiEN3U,EAAAA,IAAAA,EAAAuU,QbqiEME,GapiENE,aAAA3U,GAAA,UAAAzC,KAAAgX,EAAAI,GAAA7I,QAAA,QAAA,GbqiEU2I,GaliEVJ,EAAAld,EAAAA,SAAApH,GACAA,EAAAA,EAAA8kB,IboiEQP,EAAUD,EAAY5X,OahiE9BsB,EAAAvB,WAAAA,IAAAoY,EbmiEQN,EAAUtU,WAAW2U,IAAe,GahiE5C5W,QAAAtB,WAAAA,KbmiEQ1M,EAAUA,EAAQ8kB,KAAK1kB,EAASmL,EAAGsZ,Ia/hE3CC,OAAA9kB,EAAA8N,MbkiEQE,EajiERvB,IAAAzM,EAAAyM,IAAAoY,EAAApY,IAAAgY,GAEA,OAAAhY,EAAAuB,ObkiEQA,EajiERtB,KAAAsB,EAAAtB,KAAAmY,EAAAnY,KAAA6X,GbmiEU,SAAWvkB,GACbA,EAAQ8N,MAAMgX,KAAKH,EAAS3W,GavhEpC2W,EAAAI,KAAAtY,IAAAuB,EAAAvB,IAAA,KAAAC,KAAAsB,EAAAtB,KAAA,Qb+hEIyP,Ea1hEJ3O,SAAApN,SAAAA,Gb2hEM,Ga/gEN4kB,GACAD,EAVAnY,GbyhEQH,IavhER,EAGAuY,KAAAA,EA4BA,Ob6/D0C,UAAhC7I,EAAGlO,IAAI7N,EAAS,YahhE1B2kB,EAAAA,EAAAtY,yBbmhEQuY,EAAiBC,EAAoB7kB,Ga9gE7CwM,EAAAuP,EAAAvP,OAAAxM,GACAmM,EAAAnM,EAAAoO,UACAhC,EAAA6B,EAAAA,OAAAA,IAEA3B,EAAAA,KAAAqY,EAAAA,IAAAA,EAAA9W,kBAAA,GbghEQ8W,EAAiBrY,MAAQyP,EAAGlO,IAAI+W,EAAgB,mBAAmB,KargE3EzY,MAAAsX,EAAAzjB,YACAoM,OAAAoX,EAAAA,aACAnX,IAAAzB,EAAA4Y,IAAAA,EAAAnX,IAAA0P,EAAAlO,IAAA4V,EAAA3W,aAAAA,GACAR,KAAAkX,EAAAA,KAAAA,EAAAA,KAAAA,EAAA3V,IAAA7N,EAAA6N,cAAA2V,KbohEIzH,EahgEJ3P,OAAA9K,SAAAA,EAAAA,GbigEM,GAAIA,GAAQtB,EAAQiO,YAMpB,Oa7/DN9B,GACA7K,GAAAA,EAAAtB,IAAAA,EAAAoO,aAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAEA9M,GAAAya,EAAAlO,IAAA7N,EAAA,cAAA,GAAA+b,EAAAlO,IAAA7N,EAAA,iBAAA,GAAA+b,EAAAlO,IAAA7N,EAAA,kBAAA,GAAA+b,EAAAlO,IAAA7N,EAAA,qBAAA,GAEAsB,Gb0/DIya,Eax/DJ5P,MAAA7K,SAAAA,EAAAA,Gby/DM,GAAIA,GAAQtB,EAAQoO,Wc7rE1B,ODuMAuV,Gbw/DQriB,GAASya,EAAGlO,IAAI7N,EAAS,cAAc,GAAQ+b,EAAGlO,IAAI7N,EAAS,eAAe,GcjsEtFsB,GAAAya,EAAA+I,IAAAA,EAAAC,eAAAA,GAAAA,EAAAA,IAAAA,EAAAA,gBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,mBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,oBAAAA,GAEAzjB,GAEAya,IdqsEE3a,QcnsEFf,OAAA+O,sCAAAmU,QAAA,YAAA,WAAA,SAAAxe,GdosEI,McnsEJA,UAAA+d,EAAA1T,EAAAA,GdosEM,GAAIA,GAAU,IACd,OcnsENA,YdosEQ,GcnsERA,GAAAzO,KACAqkB,EAAAD,UACAD,EAAArhB,IAAAuhB,CAkBA,OdkrEY5V,IACFrK,EcnsEV+d,OAAA1T,GdqsEQA,EcnsER3L,EAAAwhB,WdosEU7V,EAAU,KclsEpBA,GdosEY0V,EAAKrhB,MAAMwhB,EAASD,Ic5rEhCzB,GAAA,GACA2B,GACA9V,EAAAA,MAAA6V,EAAAD,GAEA5V,OdisEOmU,Qc9rEPnU,YAAA,WAAA,SAAArK,Gd+rEI,Mc9rEJ,UAAAnF,EAAAulB,EAAAA,Gd+rEM,GAAI/V,Gc9rEV3L,IdgsEM,OADK7D,KAASA,Mc7rEpBwP,Wd+rEQ,Gc9rERA,GAAAzO,KACAqkB,EAAAplB,Sd+rEawP,KACCxP,EAAQulB,WAAY,GACtBL,Ec9rEZM,MAAAH,EAAAD,GdgsEU5V,EAAUrK,EAAS,WACjBqK,EAAU,KACNxP,EAAQylB,YAAa,GejvErChlB,EAAAoD,MAAAwhB,EAAAD,IAOAM,GAAA,SfkvEElkB,Qe7uEFT,OAAAmX,wCAAAjU,SAAA,eAAA,kBAAA,SAAA0hB,Gf8uEI,Qe7uEJC,Kf8uEM7kB,KAAK2kB,KAAO,Ke3uElBG,KAAAA,MAAAC,EAAA/kB,KAAA6kB,IAAAA,Ef8uEM7kB,KAAK+W,MAAQ,Ee7uEnB+N,KAAAA,QAAAC,EAAA/kB,KAAAmX,QAAAxW,EfgvEMX,KAAK6kB,aAAe,EAwCtB,QetvEJG,MfuvEI,QetvEJ5e,GAAA2I,GfuvEM,OevvENlC,MAAArC,WAAAA,KAAAA,SAAAA,GfyvEI,QAASya,GAAuB7e,EAAOzF,GepvE3C,IAAAd,GAHAqlB,GAAA9e,EAAAf,OfyvEU8f,EAAMxkB,EAAMiI,WAAWmG,cetvEjClP,EAAAG,EAAAH,EAAAG,EAAAH,IACA+T,GAAAA,EAAApJ,GAAAuE,gBAAAoW,EACAC,MAAA5a,EAKA,OAAA6a,GfmsEIP,EejvEJ7N,UAAAtW,gBAAAA,SAAAA,GfkvEMX,KAAK6kB,aAAelkB,GAEtBmkB,EenvEJ/N,UAAApW,WAAAA,SAAAA,GfovEMX,KAAKmX,QAAUxW,GAEjBmkB,EervEJ9kB,UAAA+W,WAAAA,SAAAA,GfsvEM/W,KAAKiX,QAAUtW,GAEjBmkB,EevvEJQ,UAAA3kB,SAAAA,SAAAA,GfwvEMX,KAAK+W,MAAQpW,GAEfmkB,EezvEJS,UAAA5kB,SAAAA,Wf0vEM,MAAOX,MAAK+W,OAEd+N,Ee3vEJH,UAAAhkB,QAAAA,SAAAA,Gf4vEMX,KAAKslB,IAAM3kB,GAEbmkB,Ee5vEJH,UAAAa,SAAAA,SAAAA,GACAxlB,KAAAulB,MAAA5kB,Gf8vEImkB,Ee5vEJ/N,UAAApW,YAAAqT,SAAAA,GACAhU,KAAAiX,KAAAA,Gf8vEI6N,Ee5vEJD,UAAAA,SAAArP,SAAAA,GAaA,MAZAxV,MAAA2kB,KAAA3kB,EAAAA,cf6vEMA,KAAKulB,MAAQ5kB,EAAM8kB,We1vEzBX,KAAAA,IAAAC,EAAAA,UACA/kB,KAAA+W,MAAAL,EAAA1W,Wf4vEMA,KAAKiX,QAAUtW,EAAM2V,aezvE3BtW,KAAA0lB,QAAAZ,EAAAC,aAEA/kB,KAAA6kB,aAAAG,EAAAA,kBAGAW,MfyvEIb,EAAUC,UAAUa,OAAS,WervEjC,MAAAX,IAAAA,MAAAA,KAAAA,KAAAA,KAAA7e,MAAAzF,KAAAA,IAAAA,KAAAA,MAAAA,KAAAA,QAAAA,KAAAA,QAAAA,KAAAA,cfwvEI,IetvEJ+kB,GAAA/kB,EAAAiI,UAkBA/I,EAAAga,KAAAA,UfovEMjG,OejvENiS,YfkvEMT,QejvENU,EfmvEI9lB,MAAK4D,MejvET3E,UAAAmmB,aAAA,SAAAW,EAAAC,GfkvEM,GejvENC,GAAA,SAAA3hB,Gf63EQ,QeltER4hB,GAAAtS,GACA,GAAAuS,GAAAA,EAAAC,EACA,OAAAC,GAAAC,GfotEQ,QejtER7lB,GAAAmT,GfktEU,GejtEV2S,GAAAC,EAAA5S,GACA6S,EAAAC,EAAAD,QAAAA,MAAAA,QfktEcP,EejtEd,kBAEAC,EAAAC,EAAA/gB,MAAAmF,GfitEc6b,EehtEd3c,OAAA2c,KAAAA,GfitEcM,IAWJ,OAVAlmB,SAAQC,QAAQylB,EAAa,SAASM,Ge/sEhDE,GAAAA,EAAAF,GfitEcA,EAAOC,EAAuBD,OAE9B,KAAK,GAAIjc,GAAI,EAAGA,EAAI6b,EAAahhB,OAAQmF,Ie7sEvDic,EAAAG,EAAAA,MAAAA,EAAAC,IAAAA,KAAAA,KAAAA,EAAAA,IAaAF,GAAAH,KAAAA,KfssEiBG,EAAezI,KAAK,IAE7B,QensER2I,GAAAA,GfosEU,MAAOA,GAAK/kB,QAAQ,MAAO,UAAUA,QAAQ,KAAM,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,MAAO,OAAOA,QAAQ,OAAQ,SAEtO,QelsERukB,GAAAC,GACA,MAAAQ,SAAAC,KAAAA,GfosEQ,QehsERD,GAAAD,GfisEU,MAAOA,GAAK/kB,QAAQ,WAAY,MAElC,QAASklB,GAAoBD,Ge3rErC,IAAA,GAFAV,GAAAY,OAAArT,KAAAA,GACAkT,EAAAI,EACAC,EAAAA,EAAAA,EAAAA,EAAAL,OAAAA,If+rEYA,EAAKA,EAAGpd,MAAM,KAAOc,EAAI,KAAK0T,KAAK,IAAM2H,EAAUQ,EAAa7b,IAAM,Ie3rElF,OAAA6b,IAAAA,QAAAA,IAAAe,EAAAd,KAAAT,Mf+rEQ,Qe7rERwB,GAAAA,GACA,GAAAC,GAAAA,EAAAA,EACA,OAAAC,GAAAA,Gf+rEQ,Qe7rERC,GAAAA,GfqsEU,IelsEV,GAEAD,GACAE,EAEAD,Ef2rEcC,EehsEdpB,EAAAgB,OAAAK,KAAAA,GACAJ,EAAAD,GAAAA,QAAA,cAAA,KAOAG,Kf0rEqE,QAAnDH,EAAcK,EAAYC,KAAKZ,KevrEjDlN,EAAA/J,EAAAA,GACAyX,EAAA1N,EAAAA,GfyrEY4N,EAAgBG,EAASL,GerrErCC,EAAAnC,KAAAA,EfwrEU,OAAOmC,GArMT,Ge5rER3N,GACAgO,EAtDAC,EAAA1C,QAAAlkB,UAAArB,EAAAyE,GACAyjB,KACAC,GACAC,IAAA,WACAC,GAAAjpB,aACAme,EAAAne,EAAAmmB,OAAA,cAAA,mBACA+C,GAAAA,aACAC,EAAAA,EAAArC,OAAAsC,cAAAC,mBACAC,GAAA,mBACAC,EAAAvpB,EAAAmmB,OAAA,iBAAA,oBACAqD,GAAAA,oBACAC,EAAAA,EAAA3C,OAAAsC,eAAAM,iBACAC,EAAAA,QACAC,KAAA5pB,EAAAmmB,iBAAA0D,IAAA5K,KAAA,KACA6K,IAAAA,EAAAV,iBAAAC,SAAApK,KAAA,KACA8K,GAAA,yBACAC,EAAAhqB,EAAAmmB,OAAA,yBAAA,2BfkvEUqD,KAAM1C,EAAQsC,iBAAiBa,MAAMhL,KAAK,Ke/uEpDwK,IAAAd,EAAAA,iBAAAA,WAAAA,KAAAA,KACA9B,GAAAA,gBACAqD,EAAAA,EAAAtS,OAAAA,eAAAA,iBACAuS,KAAA1D,gCACAO,GAAAP,WACAoC,EAAApC,EAAA9O,OAAAA,wBAAAA,kBAEAoR,GACAC,IAAAvC,EAAA/O,gBACAuR,GAAAxC,EAAA/O,WACAwR,EAAAA,EAAAnD,WACAoD,GAAAA,EAAApD,WACAuD,EAAAA,EAAA7C,WACA8C,GAAA9C,EAAA2D,SACAjM,EAAAsI,EAAA/O,SfivEUsR,GejvEVvC,EAAA3O,SfkvEUmR,EelvEVxC,EAAA1lB,SfmvEUmoB,KAAMnD,EelvEhByD,IAAAA,EfovEUF,GepvEV7C,EAAA1lB,QfqvEUwoB,EAAG9C,EAAM2D,QepvEnBX,EAAAA,SAAA/nB,GAAA,GAAAoW,GAAAuS,KAAAA,WAAArE,EfuvEY,OAAOjlB,MAAK2W,SAAShW,EAAM2R,MAAM,OAASyE,EAAQ,GAAKA,IAEzD0R,KexvEV,SAAAa,GfyvEY,MAAOtpB,MAAKspB,SAASrE,EAAuBc,EAAQsC,iBAAiBa,MAAOvoB,KAE9E+nB,Ie1vEV,SAAAY,Gf2vEY,MAAOtpB,MAAKspB,SAASrE,EAAuBc,EAAQsC,iBAAiBM,WAAYhoB,KezvE7FqoB,GAAA,SAAAroB,GAAA,MAAAX,MAAAqZ,SAAAA,EAAA1Y,EAAA,IACAsoB,EAAA,SAAAtoB,GAAA,MAAAX,MAAAW,SAAA,EAAAA,EAAA0E,IfgwEU0jB,KAAMrD,EAAMrM,Ye5vEtB2P,GAAAO,SAAAA,GACA1B,MAAAA,MAAAA,YAAAA,IAAAA,EAAAA,IAGAhO,EAAAA,SAAA2P,GACAD,MAAAE,KAAAA,EAAAA,GAAAD,IAAA3P,EAAAA,OAAA2P,KAAAA,YAAAA,IAAAA,EAAAA,GAAAA,KAAAA,YAAAA,EAAAA,ICnHA,OhBo3EQ3P,Ge3vER0P,KAAAviB,Wf4vEU6S,EAAY2P,QAAUzD,EAAQsC,iBAAiBppB,EAAQ2U,SAAW3U,EAAQ2U,OezvEpFiG,EAAAA,EAAAA,EAAA6P,SAEA7B,EAAAjU,EAAAmS,EAAAsC,Uf2vEQxO,EezvER8P,QAAA/V,SAAA6V,GACA,MAAAG,SAAAA,OAAAhW,IAAAqT,MAAAA,EAAArT,WACA7O,EAAAA,KAAA4kB,If2vEQ9P,EexvER1E,MAAAuU,SAAA7c,EAAA6c,EAAAnT,EAAA5D,GACAiB,IAAApJ,EAAAzF,EAAAM,iBAAAuO,IAAAA,GACAnT,QAAAmpB,OAAApf,KAAAof,EAAAA,EAAAzU,EAAApQ,GAAA8U,EAAA2P,QAAA7W,GfyvEU,IAAIgX,GAAc/V,EAAS6V,EAAgB7V,GAAU2V,EetvE/D3R,EAAAgO,EAAAA,EAAAA,GAAAA,EAGA5Y,EAAAmI,EAAAwS,KAAA/P,EfsvEU,KervEV7S,EAAA,OAAA,CAGA,KAAA,GfmvEcoQ,GAAOuU,IAAa7c,MAAM6c,EAASnT,YAAa,GAAIuO,IAAY+E,SAASH,IAAY,GAAI5E,IAAY+E,SAAS,GAAInT,MAAK,KAAM,EAAG,EAAG,IenvEjJkB,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,IfqvEgBgS,EAAapf,IAAIof,EAAapf,GAAGuZ,KAAK5O,EAAMpQ,EAAQyF,EAAI,GejvExE,IAAA2K,GAAAA,EAAAA,QAEA,OAAAxU,UAAAA,EAAA2kB,IAAA,MAAA1N,EAAAkS,WACAC,EAEAnS,GfovEQiC,EelvERmQ,oBAAA,SAAAlpB,EAAAH,GfmvEU,GelvEVwU,EfmvEU,IelvEV1U,UfkvEcE,EelvEdC,CACAuU,GAAAA,GAAArU,GAAA4V,KfmvEYvB,GelvEZ,GAAAuB,MAAAqT,EAAAvE,cAAAuE,EAAAtE,WAAAsE,EAAAD,WAAA,YAAAhpB,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,YAAAA,EAAA,EAAA,QfovEYqU,GenvEZ1U,QAAAE,SAAAA,IAAAA,EAAAA,MAAAA,UfmvEmB,GAAI+V,MAAK/V,EAAMspB,OAAO,EAAGtpB,EAAM0E,OAAS,IehvE3D8P,EAAAA,GfkvEmB,GAAIuB,MAAK1J,SAASrM,EAAO,Ke/uE5CupB,QAAAA,SAAAA,IAAAvpB,IAAAA,EAAAG,OACAiU,YAAAA,IAAAA,EAAAA,KAAAA,EAAAA,GAGA,GAAA2B,MAAAA,EfivEU,Oe/uEV3B,IfivEQ8E,Ee/uERqQ,oBAAAvpB,SAAA0Y,EAAAA,GfgvEU,GAAItE,EextEd,Of0tEYA,GehvEZjU,QAAAiU,GACA,GAAA2B,OAAA2C,YAAA,KAAA,EAAA,GACAQ,QAAAA,SAAAlZ,IAAA+V,EAAApE,MAAA,UfgvEmB,GAAIoE,MAAK/V,EAAMspB,OAAO,EAAGtpB,EAAM0E,OAAS,IAAIgU,YAAY,KAAM,EAAG,Ge7uEpFtE,EAAAA,Gf+uEmB,GAAI2B,MAAK1J,SAASrM,EAAO,KAAK0Y,YAAY,KAAM,EAAG,GenuEtE8Q,QAAAA,SAAAA,IAAAhV,IAAAxU,EAAAwU,OACA,YAAAA,IAAAnC,EAAAA,KAAAA,EAAAA,GfsuEmB6G,EAAYI,MAAMtZ,EAAO,GAAI+V,MAAK,KAAM,EAAG,EAAG,KeztEjEmD,EAAAE,qBAAA,SAAA5E,GACA,MAAAA,IAIAA,EAAAxC,SAAAA,EAAAA,WAAA,GAAAwC,EAAAnB,WAAA,EAAA,GACAmB,GAJA,MfkuEQ0E,EAAYE,qBAAuB,SAAS5E,EAAMxC,EAAUyX,Ge3tEpE,MAAAjV,IAYA2R,GAAAI,QAAAA,IACA/R,EAAA6R,GAAAA,MAAAA,EAAAA,WfotEY7R,EAAKyB,WAAWzB,EAAKmB,cAAgB8T,EAAO,GAAK,GAAKjV,EAAKkV,sBehtEvE9D,Gf4sEmB,MgBv7EnBvmB,EAAAsqB,OACAvE,EAKA/lB,OAAAuqB,QhB2/EE9pB,QgBv/EF+pB,OAAAA,2CAAAvV,QAAAA,kBAAAA,UAAAA,aAAAA,SAAAA,EAAAA,GhBigFI,QgBl/EJwV,GAAA/X,GhBm/EM,MAAO,wCAAwCiV,KAAK/T,GAAQxL,MAAM,GAVpEpI,KgBv/EJsqB,iBAAAjC,WhBw/EM,MAAOtC,GAAQzW,IAEjBtP,KgBt/EJuqB,kBAAA,SAAA3W,EAAAqB,GhBu/EM,MAAO8Q,GAAQsC,iBAAiBzU,IAAWA,GAE7C5T,KgBp/EJwqB,cAAAC,SAAA/X,GhBq/EM,MAAOqT,GAAQsC,iBAAiBC,UAKlCtoB,KgBh/EJ0V,YAAA+U,SAAA/X,GhBi/EM,MAAO+X,GAAgB/X,GAAY,IAErC1S,KgB9+EJ8V,cAAA2U,SAAA/X,GhB++EM,MAAO+X,GAAgB/X,GAAY,IAErC1S,KgB5+EJ+V,cAAA0U,SAAA/X,GhB6+EM,MAAO+X,GAAgB/X,GAAY,IAErC1S,KgB1+EJ4V,cAAA6U,SAAA/X,GhB2+EM,MAAO+X,GAAgB/X,GAAY,IAErC1S,KgBz+EJgW,YAAAgQ,SAAApS,GhB0+EM,QAAS6W,EAAgB/X,GAAY,IEjiF3CjS,KAAAA,OAAA,SAAAiS,GAGA,QAAA3P,EAAA1B,GAAAR,IFmiFIb,KEp+EJ2T,WAAAnU,SAAA2V,EAAAvB,EAAA3U,EAAAA,GFq+EM,MEp+ENkB,GAAAgV,EAAAvB,EAAAjB,OFu+EElS,QAAQf,OAAO,0BAA2BgrB,QAAQ,cAAe3nB,GAiFjEtC,QGpnFFsI,OAAA,wBAAA,sBAAA,sCAAA7F,SAAA,SAAA,WHqnFI,GGpnFJlE,GAAAgB,KAAAH,UACAL,UAAA,UACAkC,kBAAA,UACAyB,YAAA,GACA9D,YAAA,QACAsrB,YAAA,QACAvnB,UAAA,MACAxB,YAAA,uBACAgE,SAAA,GHqnFMlE,iBAAiB,EGlnFvB1B,WAAA4D,EAEAvE,QAAAqB,KACAiqB,UAAA5J,EACA3d,UAAAwnB,EAEAhpB,MAAAipB,EACAjlB,MAAAklB,EHmnFI9qB,MGhnFJ4D,MAAAmnB,UAAAzmB,aAAAA,cAAAA,WAAAA,WAAAA,OAAAA,aAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GHunFM,QAASymB,GAAazmB,GA0HpB,QAASqF,KG/jFjBxH,EAAAA,MAAAiD,EAAAnG,YAAAH,QAAAksB,GA+BAA,QAAA7gB,KACAhI,EAAA6oB,MAAAlhB,EAAAA,YAAA,QAAAkhB,GHyjFUJ,EGxjFV7kB,YAAAA,EAAAA,YAAAA,SHyjFc9G,EGxjFda,WACAkrB,EAAAplB,YAAAA,EAAAA,YAAAA,SAAAA,EAAAA,WA2BA,QAAAqlB,KACAhsB,EAAA0rB,WACAO,EAAA3gB,GAAAA,QAAA4gB,GACAC,EAAA7gB,GAAAA,QAAA4gB,GACAC,EAAA7gB,GAAAA,QAAA8gB,IAIA,QAAA5gB,KACAxL,EAAAmE,WACA8nB,EAAAhhB,IAAA,QAAA8gB,GHgjFYI,EAAgB7gB,IAAI,QAAS4gB,GAC7BC,EAAgB7gB,IAAI,QAAS8gB,IAGjC,QG9iFRH,KH+iFcjsB,EAAQmE,UACV8nB,EAAahhB,GAAG,QAAS8gB,EAAOrgB,UAGpC,QG3iFR1L,KACA+rB,EAAA/a,UH4iFYib,EG3iFZ3gB,IAAA,QAAAygB,EAAArgB,UH8iFQ,QAASwgB,GAAoBrmB,GGziFrCA,EAAAumB,SAAAA,EAAAA,gBACA7lB,WAAAA,EAAAA,SH2iFYwlB,EAAO/a,QGviFnB+a,EAAAA,QH4iFQ,QAASK,GAAoBvmB,GGtiFrCA,EAAAwmB,iBHyiFQ,QGviFRA,KHwiFcN,EAAOlhB,UAA6B,OAAjBohB,IGriFjCD,IACAC,KHwiFcI,IACFA,EAAW3c,WGpiFvB2c,EAAAN,MAMAE,IAEA/oB,EAAAA,SHiiFY+oB,EAAeF,EAAOllB,SAAW,MG9zF7CklB,GAAAA,MAGAtqB,EAAAsqB,EAAApc,SAAAnO,QAAAS,UAAAJ,EAAAA,GACA8O,EAAA9O,EAAAqB,SAAArB,EAAAsO,QAAAnQ,GHumFYkD,EAAQ6oB,EAAOxmB,OAASvF,EAAQkD,OAASlD,EAAQkD,MAAMsH,QAAUxF,EAAWwF,MGnmFxFtH,GAAAoN,SAAAtQ,EAAAkE,YACAhB,EAAAoC,UAAA,QHsmFQymB,EAAOhc,IAAM/P,EAAQqQ,IAAMrQ,EAAQI,SAAWJ,EAAQI,QAAQsH,KAAK,OAAS,GAC5EjG,GAAU,QAAS,WAAa,SAASI,GGnmFjDyqB,EAAAzqB,KAAAqB,EAAArB,GAAAqO,EAAAC,YAAAnQ,EAAA6B,OHsmFQqB,EGpmFR6oB,MAAAplB,WHqmFUzD,EAAMoC,aAAa,WACjBymB,EAAOjlB,UAGX5D,EGpmFR6oB,MAAA7gB,WHqmFUhI,EAAMoC,aAAa,WACjBymB,EAAOplB,UG9lFnBzD,EAAA+oB,QAAAA,WACA/oB,EAAAmpB,aAAAA,WACAF,EAAAA,YHomFQJ,EGnmFRlhB,SAAA3H,EAAA2H,UAAA,CHomFQ,IGpmFR6B,GAAA6f,EAAAre,EHumFYie,EAAkB3qB,QAAQpB,QAAQ,eAAiBJ,EAAQyR,YAAc,eA2L7E,OGjyFRd,GAAA1C,KACAyC,SAAAA,QACAqb,IAAAA,MHwmFUrf,KAAM,MGrmFhBqf,OAAAlb,MAGA3C,MAAAlO,QHsmFQ2Q,EGpmFRob,KAAAplB,SAAAA,GHqmFU+J,EAAc9M,EACdmoB,EAAOlb,SGhmFjBkb,EAAAtiB,KAAAA,WAGA+iB,EAAAA,MAGAtpB,EAAAipB,aAAA,WACAA,EAAAA,UHkmFQJ,EAAOtiB,QAAU,WG1lFzBsiB,IACAA,IAEAI,EAAAjb,SACAib,EAAAhb,MH4lFUjO,EG1lFVgO,YH4lFQ6a,EAAOplB,KG1lFf,WH2lFU,IG1lFVolB,EAAA/rB,SH0lFU,CACA,GG1lFVkR,GACAC,CHmnFU,IAxBI3P,QG1lFduP,UAAA/Q,EAAAkE,YH2lFYgN,EG1lFZA,EAAAhN,UH2lFYiN,EG1lFZA,EAAAnR,UAAAI,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,UAAAA,GAAAA,WAAAA,MH4lFgBJ,EAAQkE,WGvlFxB+nB,EAAAA,EAAAO,EAAAA,WAIAH,EAAAA,EAAAN,IAAAxmB,EAAAiF,GAAAA,UAAAA,QAAAA,QAAAA,EAAAA,GAAAA,WAAAA,OAIAxK,EAAA0rB,KAEAO,EAAAA,EAAAhe,SACAke,GAAAle,IHqlFUoe,EGrlFVI,EAAAC,OAAAA,OHslFUT,EAAeF,EAAOllB,SAAW6J,EAAYzN,KAAKopB,EAAY,SAAS9a,EAAerO,MGnlFhG0oB,EAAAA,WHqlFYK,EAAahe,KGllFzB/K,UAAAiD,EAAA,GAAAtG,IHqlFYssB,EAAgBle,KGhlF5Bge,UAAAhe,EAAAA,GAAAA,IHmlFY2d,MG/kFZK,EAAAA,MAAAza,EAAAxR,YAAA2sB,eAAAA,GAAAA,iBHilFU,CAGAV,EG/kFVjsB,KHglFYqR,QG/kFZ8a,UHglFa3a,SAASxR,EAAQ8J,WG9kF9BmiB,EAAAA,aHglFYA,EAAaza,SAASxR,EAAQ2sB,aG5kF1C9a,EAAA1G,YH+kFgBnL,EAAQ0rB,UG1kFxBlqB,EAAAkhB,SAAA1iB,EAAAc,mBH6kFYmrB,EG3kFZza,SAAAxR,EAAAa,YH6kFcb,EAAQ0rB,UGzkFtBK,EAAAlhB,MAAAA,EAAAA,EAAA,MAIAgC,QAAAof,QAAAA,OAAA,EACAnK,EAAAA,MAAAA,EAAA5Q,EAAAC,EAAAzG,GH0kFYmH,EAAS1G,MAAM8gB,EAAc/a,EAAQC,GAAOhR,KAAKuK,GGrkF7DqhB,EAAA/rB,SAAAa,EAAAgK,UAAA,EHwkFU7E,EGvkFV2lB,EHwkFU,IAAI9e,GAAKof,EAAa,EGpkFhCW,GAAAA,WACAphB,EAAAA,UAGAmgB,EAAAjhB,SAAAA,EAAAA,YAAAA,SACAxH,EAAAlD,WHqkFY2rB,EAAYna,SAASxR,EAAQyR,YAAc,SAAWzR,EAAQa,WGjkF1E+rB,IAEAphB,OHukFQugB,EAAOjlB,KAAO,WG5jFtBtF,EAAAkQ,WACAG,EAAA/G,UH8jFY8gB,IAEE1oB,EAAMiD,MAAMnG,EAAQH,YAAc,eAAgBksB,GAAQc,mBAG1DrrB,QAAQkQ,QAAQgR,OAAS,EG3jFvCqJ,EAAAlhB,MAAAA,EAAAA,GAIAmhB,EAAAA,MAAAA,GAAAA,KAAAA,GH4jFchsB,EAAQ0rB,UGxjFtB7Z,EAAAlH,MAAAA,GAEAghB,EAAAA,SAAApZ,EAAAvS,UAAAyR,EACAzL,EAAAhG,GH0jFUgsB,IACArgB,OG9iFVogB,EAAA/a,OAAA,WACAib,EAAAA,SHwjFYF,EAAOjlB,OGjjFnBilB,EAAAe,QHsjFQf,EAAO/a,MAAQ,WACbib,EAAa,GAAGjb,SAElB+a,EGjjFR/rB,SAAA0rB,SAAA7lB,GACA,KAAAomB,EAAAA,OAAAF,EAAAG,WACAC,EAAAA,OACAA,EAAAA,oBHqmFeJ,EAET,QAAS/lB,GAAW9C,GGxhF1BqE,EAAAA,SAAArE,EAAA+D,OAAA/D,EAAA+D,MAAAD,SAAA9D,EAAA6B,UAGA4C,QAAAA,GAAAgL,EAAAvS,GACA8C,MAAA1B,SAAApB,SAAAA,GAAA6M,GAAA2F,iBAAAD,IHkzEM,GG/mFNlR,GAAAsqB,QAAAA,QAGAjK,EAAAnS,EAAAnO,uBAAAZ,EAAAyE,WACAsmB,EAAAI,QAAAnc,QAAAC,EAAAA,SAAA7O,MACA4qB,EAAAG,EAEAF,EAAAzrB,KACAJ,EAAA,IH+0FM,OGthFNA,OHwhFKuH,UGxhFLnH,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GHyhFI,OACEuH,SAAU,MACVzE,OG1hFN1B,EH2hFMyB,KG1hFN,SAAA8P,EAAAlR,EAAA7B,EAAA6B,GH2hFQ,GAAI7B,IGvhFZkD,MAAAlD,EACAA,QAAA2sB,EHyhFUhmB,MAAM,EGphFhBnF,SAAAC,SAAA,WAAA,cAAA,aAAA,eAAAI,kBAAAA,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,YAAAA,oBAAAA,KAAAA,cAAAA,cAAAA,cAAAA,cAAAA,SAAAA,GACAL,QAAAuR,UAAArL,EAAA7F,MAAAA,EAAAgG,GAAAA,EAAAE,MAIAvG,EAAAC,aACAzB,EAAA0H,YAAA1H,EAAA+sB,WHshFQ,IAAIllB,GGphFZqI,eHqhFQ1O,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQuR,UAAUrL,EAAK7F,KAASgG,EAAiBE,KAAKL,EAAK7F,MAAO7B,EAAQ6B,IAAO,KGhhF/FL,QAAAkG,SAAA,QAAA,WAAA,SAAA7F,GACAqB,EAAAsF,IACAd,EAAAlG,SAAAkC,EAAAA,SAAAgF,EAAAC,GACAnH,EAAAA,GAAAS,EAAAiB,YAAAwF,OHshFYhB,EGlhFZslB,SHmhFU9pB,EAAMsF,OAAOd,EAAKslB,QAAS,SAAStkB,EAAUC,GG/gFxDskB,QAAAlB,SAAA/rB,GAGAI,QAAAsH,OAAA1D,EAAA0E,GAIAukB,EAAAA,QAAAxjB,IAEAwjB,EH8gFQ,IAAIA,GAAQlB,EAAO/rB,EACnBI,GAAQ6K,GAAGvD,EAAK1D,SAAW,QAASipB,EAAM/hB,QAC1ChI,EAAM0G,IAAI,WAAY,WiBj6F9BnJ,GAAAwsB,EAAAxjB,UAIA7I,EAAAG,KACAF,EAAA,YjBo6FEW,QiB/5FFwC,OAAA,2BAAA,2BAAAC,SAAA,YAAA,WjBg6FI,GiB/5FJC,GAAAnD,KAAAH,UACAuD,UAAA,UACAxB,YAAA,WACAyB,YAAA,WjBg6FM0F,UAAW,ciB75FjB/I,YAAA,6BAEAiD,QAAAwb,QACAtb,WAAAgpB,EAEA/oB,UAAAgpB,EjB65FMxqB,MiB35FNyqB,EjB45FMhpB,MiBz5FNpE,EjB25FIe,MiBx5FJqsB,MAAAA,UAAAhtB,aAAAJ,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GjB25FM,QiBr5FNmtB,GAAAtnB,EAAAY,GjB87FQ,QAAS4mB,GAAYxnB,GiB53F7B0B,MAAAA,GAAAsC,SAAAzJ,EAAA,GAEAyF,EAAAgE,SAAAzJ,EAAA,IAAAgtB,EAAAtmB,OAFAS,OjBo1FQ,GiBr5FR1B,MACAA,EAAAW,QAAAA,UAAAA,EAAAA,EjBs5FQ4mB,GiBn5FRE,OAAA9rB,EAAApB,OAAAgtB,EAAAvmB,MAAA2D,QAAAoI,EAAApI,OjBo5FQ4iB,EiBn5FRE,EAAAltB,EAAAJ,EjBo5FQ,IiBn5FRutB,GAAA5nB,EAAAA,QjBo5FQynB,GiBn5FR3rB,WAAA6rB,SAAAznB,GjBo5FU,GiBn5FV,UAAAqnB,KAAAA,EAAAA,SjBm5FU,CACArnB,EAAIU,iBiBh5FdV,EAAAA,iBAGAynB,IAAAA,GAAA3nB,QAAAqL,QAAAA,EAAAA,SAAAA,GAAAA,iBAAAA,sBjBg5FU,IAAKsc,EAAMlnB,OAAX,CiB14FV,GAAAO,EACAymB,SAAAzmB,QAAA2mB,EAAA,SAAAzgB,EAAAtB,GACA5E,GAAAA,EAAAA,KAAAA,EAAAA,YAAAA,EAAAA,KAIAxC,KAAA0B,EAAA7F,SAAAotB,EAAAA,EAAAvmB,IAAA,KAAAumB,EAAAvmB,SAAAlB,EAAAynB,EAAArmB,OAAAA,EAAAA,IAAAA,QAAAA,YAAAA,KAAAA,EAAAA,GjB04FUumB,EiBz4FV9N,GAAAvU,GAAA,GAAA+F,UjB24FQ,IiBz4FRrK,GAAA4mB,EAAAC,IjB04FQJ,GAAUzmB,KAAO,WiBv4FzBA,IACAymB,EAAAtmB,WACAsmB,EAAAA,UAAAA,EAAAvmB,UAAAumB,EAAAvmB,SAAAoE,GAAA,UAAAmiB,EAAArmB,YACAyY,EAAAxf,GAAAmE,QAAAA,IACAqb,GAAAA,GACA+N,EAAAC,SAAA,aAAAD,EAAAhb,SAAAA,QjB04FQ,IAAIzL,GAAOsmB,EAAUtmB,IiBt4F7BsmB,GAAA3jB,KAAA2jB,WACAA,EAAA3jB,WACA+V,EAAArb,UAAAkpB,EAAAA,UAAAA,EAAAA,SAAAA,IAAAA,UAAAA,EAAAA,YACA5jB,EAAAA,IAAAA,QAAAA,GjBw4Fc8jB,EAASC,SAAS,aAAaD,EAAShb,YAAY,QiBn4FlEzL,KjBs4FQ,IiBp4FR2C,GAAAI,EAAAzJ,OAiBA8C,OjBo3FQkqB,GAAU3jB,QAAU,WiBl4F5B+V,EAAA4N,IAAAA,QAAAA,GjBo4FU3jB,KiBt3FV2jB,EjB60FM,GiBx5FN5N,GAAA+N,QAAAntB,QAAA8Q,EAAAA,SAAAA,MAIAkc,EAAArmB,QAAA+e,UAAAjgB,iBAAAA,QAAAA,UAAAA,uBAAAA,QAAAA,UAAAA,oBAAAA,QAAAA,UAAAA,mBAAAA,QAAAA,UAAAA,gBjBq8FM,OiBz3FN4nB,OjB23FKlmB,UiBz3FL,cAAAmmB,UAAAA,OAAAC,YAAA,SAAA5oB,EAAAmL,EAAAkd,GjB03FI,OACEzlB,SAAU,MACVzE,OiBz3FN,EjB03FMlC,QiBz3FNysB,SAAAltB,EAAAmtB,GjB03FQ,IiBz3FRD,EAAA1tB,WAAAA,CjB23FU,IADA,GiBz3FV2tB,GAAAE,EAAAC,GAAAA,YjB03FiBH,GAAwC,IAAzBA,EAAYC,UAChCD,EAAcA,EAAYA,WiBp3FtC1tB,IAAAA,EAAAA,UAAAA,SAAAA,mBAAAkD,EAAAA,SAAAA,EAAAA,UjBw3FYuqB,EAAO1tB,YAAcD,EiBv3FjC0B,EAAAC,WAAAosB,YAAAH,IjB23FQ,MiBt3FR7lB,UAAA3E,EAAA9C,EAAAsH,GACAlG,GAAAA,IACA0B,MAAA1B,EAIAA,SAAAkG,SAAAomB,WAAA,cAAA,aAAA,eAAA,YAAA,YAAA,QAAA,UAAA,WAAA,OAAA,YAAA,KAAA,aAAA,SAAAjsB,GACAqB,QAAAsF,UAAAslB,EAAAA,MAAA9tB,EAAA0I,GAAAC,EAAAA,KjBs3FU,IAAId,GiBp3Fd,ejBq3FUrG,SAAQC,SAAU,OAAQ,aAAe,SAASI,GiBj3F5DksB,QAAAA,UAAAX,EAAAhtB,KAAAJ,EAAAA,KAAAA,EAAAA,MAAAA,EAAAA,IAAAA,KAIAkD,EAAAsF,YjBi3FYtF,EiBh3FZsF,OAAAulB,EAAAA,WAAAhb,SAAArK,EAAAC,GACAzF,EAAA1B,QAAAG,IACA,EjBk3FU,IAAIosB,GiBh3FdX,EAAAhtB,EAAAJ,EjBi3Fc0H,GiBh3FdqmB,QjBi3FY7qB,EAAMsF,OAAOd,EAAK0L,OAAQ,SAAS1K,EAAUC,GACtColB,GAAavsB,QAAQuR,UAAUrK,KAChClH,QAAQG,SAAS+G,KAAWA,IAAaA,EAAS2K,MAAM,yBiB72F1EzJ,KAAA,EACAmkB,EAAAA,OAEAA,EAAAjnB,UjBk3FU5D,EAAM0G,IAAI,WAAY,WAChBmkB,GAAUA,EAAStkB,UkBvhGnChJ,EAAA,KAOAG,EAAAG,alBwhGES,QkBhhGF0C,OAAA,6BAAA,oCAAA,uCAAA,2BAAAD,SAAA,cAAA,WlBihGI,GkBhhGJE,GAAApD,KAAAH,UACA+B,UAAA,UACAyB,YAAA,aAEAmP,UAAA,cACAya,YAAA,iCACAC,QAAAA,QACAva,WAAA,EACAwa,UAAAA,EACAC,MAAAA,EACAC,MAAAA,EACAC,WAAAA,EACAC,SAAAA,OACAC,WAAAA,YACAC,SAAAA,KACA5a,gBAAA,KACA6a,UAAA1a,KACA2a,YAAA3a,MACA4a,WAAA,OACAC,iBAAA,YACAC,gBAAA,OACAC,cAAAA,EACAC,WAAA,EACAC,UAAAA,EAAAA,GlBghGMN,UAAU3a,EAAAA,GkB7gGhBhT,UAAA4D,EAEAiqB,QAAAra,EACAsa,UAAAvkB,EACAwkB,mBAAAluB,GAEAmuB,SAAAE,mClB6gGMD,UkB3gGNE,oClB6gGInuB,MkB3gGJ4D,MAAA3E,UAAAkvB,YAAAvf,aAAAA,OAAAA,iBAAAA,kBAAAA,WAAAA,WAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GlB+gGM,QkBxgGNuf,GAAAC,EAAAC,EAAAA,GA4IAF,QAAAA,GAAAriB,GACAA,EAAAtD,SAAAgL,EAAAhB,YAAA1G,EAAAqJ,MlBg/FQ,QkB9+FR9V,KlB++FUA,EkB9+FV,GAAA4Q,QA/IA,GAAA4D,GAAAua,EAAAva,EAAAA,QAAAA,UAAAA,EAAAA,IACA1R,EAAAlD,EAAA2uB,MACAzrB,EAAAmsB,EAAAN,SACA7rB,EAAAosB,EAAAtvB,MACAuvB,GAAAA,YAAAL,EAAAM,WAAAC,EAAAA,QAIAvsB,IAAAA,GAAAwsB,EAAAxZ,ElBsgGQgZ,GkBrgGRA,OAAAhZ,EAAAA,KlBsgGQ,IAAItB,GAAWua,EAAYva,QkBpgGnC1R,GAAAysB,MAAAA,EAAAhB,UlBsgGQzrB,EkBrgGRgsB,UAAAS,EAAAjuB,SlBsgGQwB,EAAMosB,WAAatvB,EAAQgvB,SkBpgGnC9rB,IAAAA,GAAA0sB,EAAAJ,OAAAtsB,EAAAusB,MlBsgGQvsB,GkBrgGRgsB,QAAAW,SAAA3sB,GlBsgGUgsB,EAAYxpB,OAAOwQ,IAErBhT,EkBjgGR1B,YAAA4V,SAAAlB,GlBkgGUgZ,EkBjgGVA,YAAAhZ,IlBmgGQhT,EAAM0sB,YAAc,WkB//F5BV,EAAA3X,SAAArU,EAAAusB,MAAA,GAAAP,EAAAM,OAAAppB,SAGA8oB,EAAAY,OAAAA,SAAAA,GACA9vB,QAAA+vB,OAAAA,KAAAC,MAAAA,EAAAA,aACAd,EAAAjX,MAAA/U,EACA1B,EAAAC,OAAAA,KAAAyB,EAAAqI,IlBigGU2jB,EAAY3X,QAAO,IAErB2X,EkB7/FR1tB,oBAAAgV,SAAAA,GACAxW,EAAAkD,mBAAA8sB,ClB8/FU,KkB7/FV/uB,GAAAA,GAAA8H,EAAAA,EAAAA,EAAAA,KAAAvH,OAAA0U,EAAA7U,EAAA6U,IACAjV,QAAAA,QAAAiF,EAAAA,KAAAA,GAAAA,EAAAA,iBlBggGQgpB,EkB9/FRA,OAAApoB,SAAAoP,EAAAsB,GlB+/FehW,QAAQ4V,OAAOnW,EAAWuV,cAAavV,EAAWuV,WAAa,GAAIiB,MAAKvB,KACxEhT,EAAMusB,OAASjY,GAClBvW,EkB//FZ8H,cAAAvH,QAAAH,KAAA6U,IACA1U,EAAAS,UAAAyjB,EAAAxP,YAAAqQ,GAAAD,EAAApQ,WAAAA,EAAA2U,MAAAA,OlBsgGYrpB,QAAQS,OAAO2S,GACb8Q,KAAMxP,EAAKqQ,ckBjgGzB2I,MAAAW,EAAAA,WAEA3sB,KAAAusB,EAAAQ,YAEAf,EAAA3X,QAAAA,EAAAA,MAAAA,GlBkgGY2X,EAAY3X,WAGhB2X,EkB7/FRgB,QAAA,SAAAX,GACAA,EAAAA,MAAAzK,ElB8/FUyK,EAAUL,EAAYM,OAAOtsB,EAAMusB,OkB3/F7CP,EAAAiB,UlB8/FQjB,EkB5/FRztB,OAAAyB,SAAAiV,GlB6/Fc+X,KAAa,GAAQX,EAAQa,QAC7BF,KAAa,GAAUX,EAAQa,QkB1/F7ClB,EAAAA,MAAA5W,KAAAA,IlB6/FQ4W,EAAYiB,gBAAkB,WkBz/FtCjB,IAAAA,GAAAA,GAAAmB,EAAAA,EAAAA,EAAAA,KAAAjqB,OAAAyG,EAAAA,EAAAA,IACAA,QAAAkL,QAAAwX,EAAAe,KAAAA,GAAAzjB,IlB6/FQqiB,EkBz/FRqB,YAAAA,SAAAA,GAIA,MAAA3X,GAAAA,WAAAnB,IlBw/FQyX,EkBv/FRtW,eAAA4X,SAAAA,GlBw/FU3jB,EkBx/FVyZ,SAAA1N,EAAA6X,WAAAA,EAAAA,OlB0/FQvB,EAAYS,YAAc,SAASjuB,GkBz/F3CwtB,GAAAA,GAAA3X,EAAAA,MlB2/FcqB,EAAa,GAAInB,MAAKA,KAAKiZ,IAAI9b,EAAS8Q,MAAQ6K,EAAM7K,MAAQ,GAAKhkB,EAAOkT,EAAS0R,OAASiK,EAAMjK,OAAS,GAAK5kB,EAAO,GkBx/FrIwtB,SAAAA,OAAA5oB,GAEAT,KAAAU,EAAAA,iBACAV,MAAAW,EAAAA,cAEA0P,KAAA5L,EAAAqmB,elBy/FUzB,EkBv/FVrW,UlBy/FQqW,EAAY5oB,aAAe,SAAST,GAGlC,GAFAA,EkBv/FVgT,iBlBw/FUhT,EAAIW,kBACA8D,EAAS,CkBr/FvB4kB,GAAAA,GAAAnoB,QAAA3G,QAAAyF,EAAAA,OACAA,YAAAgT,EAAA,GAAA7N,SAAAjD,gBACAxB,EAAAA,EAAAA,UAGAsS,EAAApS,eAAA,WlBw/FQyoB,EkBr/FRnoB,WAAA,SAAAlB,GlBs/FU,GkBr/FV3C,mBAAA6E,KAAAlC,EAAAY,WAAAZ,EAAA+qB,WAAA/qB,EAAAgrB,OlBq/FU,CAGA,GAFAhrB,EAAIU,iBACJV,EAAIW,kBACgB,KAAhBX,EAAIY,QAQN,YkB9/FZvD,EAAAusB,MAKA5qB,EAAAA,OAAA6B,WlBs/FgBwoB,EAAYW,QAAQ3sB,EAAMusB,MAAQ,KAHpCP,EAAYpoB,MAAK,GkBz+F/B1G,GAAA0wB,UAAA9f,GlBk/FUnM,EAAY6B,WAQd,IkB9+FRtG,GAAAiN,EAAAwD,IlB++FQqe,GkB9+FRxnB,KAAA,WlB++FU,MkB9+FVtH,IAAAJ,EAAA2V,WlB++FYvV,EAAQiN,KAAK,OAAQ,YkB7+FjCuI,GAAAA,IAAAA,qBAAAA,eAGA+D,IACAuV,EAAAzlB,KAAAA,OAAA,QACArJ,EAAAmU,KAAAA,WAAAhB,QACAnT,EAAAkL,GAAAA,QAAAqK,QAEAgE,MAGA,IAAAC,GAAAsV,EAAAvoB,OACAuoB,GAAAvoB,QAAA,WACA4N,GAAAnU,EAAAsH,WACAkS,EAAAA,IAAAA,QAAAA,GlB8+FUD,IAEF,IkBz+FRC,GAAA5Z,EAAAmE,IlB0+FQ+qB,GkBz+FR9uB,KAAA,YlB0+FekK,GAAWlK,EAAQsH,KAAK,aAAetH,EAAQsH,KAAK,cACzDkS,IACAzU,EAAS,WkBv+FnB0U,EAAAqV,WACAA,EAAApoB,SAAAmE,GAAA8G,EAAAA,aAAAA,YAAAA,EAAAA,cACAmd,EAAAA,UACAA,EAAAroB,GAAAA,UAAAyD,EAAAvD,cAEA3G,GAAAA,IlB0+FQ,IkBx+FRyZ,GAAA9H,EAAAA,IAmBA,OlBs9FQmd,GAAYpoB,KAAO,SAASiL,GkBt+FpCmd,EAAAA,WlBw+FUA,EAAYroB,SAASyE,IAAIhB,EAAU,aAAe,YAAa4kB,EAAY5oB,ckBp+FrF2oB,EAAAA,UACA7uB,EAAA6uB,IAAAA,UAAAA,EAAAA,YAMA1nB,EAAAwK,KAKAmd,ElB0zFM,GkB3gGN3a,GAAA2a,6BAAA3pB,KAAAA,EAAAA,UAAAA,WACA+E,EAAAqkB,eAAA3uB,GAAA2uB,UAAA3uB,CAmNAiD,OA/MArC,GAAAuuB,OAAAO,EAAAA,KAAAR,EAAAA,oBA8MAtnB,EAAAhH,SAAAA,EACAquB,MlBg+FK1nB,UkB79FLrE,gBAAAA,UAAAA,SAAAA,KAAAA,iBAAAA,cAAAA,cAAAA,SAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GlB89FI,GAAIqR,GAAW,6BAA6BxM,KAAKhD,EAAQ+U,UAAUC,UACnE,QACEpS,SkB99FNnG,MlB+9FMoG,QAAS,UACT3E,KkB59FN4E,SAAAA,EAAAzH,EAAAsH,EAAAzG,GlBihGQ,QkB38FR8vB,GAAAC,GlB48FU,MkB18FVC,IAAAC,EAAA9qB,OACA+qB,EADA,KlBs9FQ,QkBz8FRlwB,GAAA+Y,GAEA,GAAAC,QAAAhZ,OAAAA,GAAA,ClBy8FU,GAAIkZ,GAAavM,MAAMujB,EAAWxhB,SAAS8e,UAAY2C,EAAW9Z,WAAa6Z,EAAWxhB,SAAS8e,QkBr8F7GxtB,EAAAqZ,MAAAC,EAAA5K,SAAA6K,UAAAA,EAAAA,WAAAA,EAAAA,SAAAA,QAEAtE,EAAAA,GAAAA,CAEAjV,GAAAuZ,aAAA,OAAAP,GlBq8FUhZ,EkBp8FVA,aAAAoZ,MAAAF,GlBq8FUlZ,EkBj8FVoZ,aAAA,MAAAL,GlBk8FcC,IAAShZ,EAAWuV,WAAa4a,IA+CvC,QAASC,KACP,OAAQpwB,EAAWuV,YAAc5I,MAAM3M,EAAWuV,WAAWc,WAAa,GAAK5C,EAAWzT,EAAWuV,WAAYxW,EAAQiuB,YkBrlGnIzsB,GAAAA,IACA0B,MAAA1B,ElB89FQA,SAAQC,SAAU,WAAY,cAAe,aAAc,eAAgB,YAAa,YAAa,QAAS,UAAW,OAAQ,YAAa,YAAa,WAAY,aAAc,WAAY,kBAAmB,YAAa,eAAgB,YAAa,YAAa,YAAa,OAAQ,YAAa,UAAW,WAAY,YAAa,qBAAsB,KAAM,cAAe,eAAiB,SAASI,GAChZL,QAAQuR,UAAUrL,EAAK7F,MAAO7B,EAAQ6B,GAAO6F,EAAK7F,KkBx9FhE7B,IAAAA,GAAA2P,eAEAnO,SAAA+S,SAAAvU,OAAAuT,YAAAvT,YAAAiuB,aAAA,SAAApsB,GAEAmU,QAAAhW,UAAAgW,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,MAEAtB,EAAAA,IAAA,IAIA,IAAAiG,GAAAC,EAAAA,EAAAA,EAAAA,ElBu9FQ5a,GkBv9FRA,EAAAiuB,SAAAjY,GAAAA,EAAAA,YAAAA,EAAAA,WAAAA,alBy9FQ,IkBz9FRmQ,GAAAnmB,EAAAwuB,KlB09FY9Z,EAAa,SAASwB,EAAMvB,GkBv9FxC,MAAAvB,GAAAsB,WAAAwB,EAAAvB,EAAAqB,IAEA2E,EAAAwW,GlBy9FUxc,OkBx9FVnT,EAAAG,WlBy9FUqU,KkBx9FVtN,ElBy9FUyd,OkBx9FVgL,EAAAxqB,clB09FYe,GkBx9FZypB,QlBy9FUjuB,EAAMsF,OAAOd,EAAK0L,OAAQ,SAAS1K,EAAUC,GACtCwoB,GAAe3vB,QAAQuR,UAAUrK,KAClClH,QAAQG,SAAS+G,KAAWA,IAAaA,EAAS2K,MAAM,2BkBr9FxE5R,KAAA,EAEAD,EAAAuR,OAGAoe,EAAAxhB,UlBw9FQnO,QAAQC,SAAU,UAAW,WAAa,SAASI,GAC7CL,QAAQuR,UAAUrL,EAAK7F,KkBh9FrCL,EAAAA,SAAAuR,EAAArL,SAAAumB,GACAvmB,EAAAiI,SAAA9N,GAAA8Y,EAAAjS,oBAAAA,EAAAA,GACAyoB,MAAAxhB,EAAAse,SAAAvlB,KAAAA,EAAAA,QAAAA,GlBk9Fc4oB,EAA0BrwB,EAAWuV,gBkB38FnDhV,QAAAuR,UAAArL,EAAAumB,aAIAvmB,EAAAwL,SAAA8d,aAAAC,SAAAA,GACAE,EAAAF,SAAAA,WAAAvoB,IAIAxF,EAAA1B,OAAAuR,EAAAA,QAAAwe,SAAAA,EAAA5oB,GACAzF,EAAAsF,OAAA+oB,EAAAA,clB48FW,GAKC/vB,QAAQuR,UAAUrL,EAAK6pB,gBACzBruB,EAAMsF,OAAOd,EAAK6pB,cAAe,SAASL,EAAgBH,GkBx8FpEG,EAAAI,EAAAF,GACAL,EAAA3Z,EAAA2Z,GACA5W,GACAH,EAAAA,oBAAArK,KlBu9FQ1O,EkBj8FRmwB,SAAAA,QAAAA,SAAAA,GlBk8FU,GkBj8FVnwB,ElBk8FU,KkB/7FVuZ,EAEA8W,MlB87FYrwB,GAAWoZ,aAAa,QAAQ,GkB97F5CiX,IlBi8FU,IkB97FVpb,GAAAyE,EAAAG,MAAAA,EAAAsW,EAAApxB,WlB+7FU,QkB97FVoxB,GAAA1c,MAAAwB,EAAAgY,elB+7FYjtB,GAAWoZ,aAAa,QAAQ,IAGlCiX,EkB97FVha,GACA0W,WlB87FchuB,EkB97FdA,UACAkW,EAAAA,EAAAoB,qBAAA8Z,EAAApxB,EAAA0T,UAAA,GACAgB,EAAAsZ,EAAAA,EAAAE,iBAAAluB,EAAAiuB,clBg8FU/X,EAAOyE,EAAWG,qBAAqB7Z,EAAWuV,WAAYxW,EAAQ0T,UAAU,GkB77F1FwC,WAAAlW,EAAAyX,SlB+7FmBvB,EAAKoB,UkB37FxB,SAAAlO,EAAAA,SAEA8M,EAAAA,UAAAA,IACA5M,QAAA9H,EAAAoF,SACAmU,EAAAA,cAEA7E,GAAA5M,MAAAA,OlB67FQrI,EkB37FR0Z,YAAAK,KAAA1R,SAAAA,GlB47FU,GAAI4M,EAaJ,OAXEA,GkB57FZA,QAAAtP,YAAA0C,IAAA,OAAAA,EACAyR,IACAvZ,QAAA8H,OAAAA,GlB47FmBA,EkBr7FnBqR,WAAAnE,EAAAA,SACA6a,EAAAA,MAAAA,EAAAA,KAAAA,EAAAA,iBlBu7F0C,SAArBrxB,EAAQguB,SkBn7F7B9nB,GAAAA,MAAA,IAAAA,GlBs7FmB,GAAIuR,MAAKnO,GkBh7F5BrI,EAAAA,WAAAuV,EAAA5I,qBAAA4I,EAAAc,EAAAA,UlBm7FiB+Z,MAETpwB,EkBh7FRkwB,QAAAA,WACAnxB,EAAAA,IAAAqxB,MASAptB,EAAAA,IAAA,WAAA,WAQAwG,GAAA+mB,EAAAA,UACAC,EAAAA,KACAN,EAAA/qB,YlBy6FOnC,SAAS,kBAAmB,WkBl6FnC,QAAAytB,GAAAC,EAAA9I,GlBq6FM,IkBp6FN,GAAA4I,MlBo6FaG,EAAIxrB,OAAS,GkBj6F1BrF,EAAA4D,KAAAitB,EAAA5V,OAAA,EAAAwV,GlBo6FM,OkBh6FNtuB,GlBk6FI,QkB/5FJ8S,GAAAA,EAAAhW,GlBg6FM,OkB/5FN0U,EAAAA,EAAAA,GAAAmU,ElBi6FI9nB,KAAK4D,MAAS,iBAAkB,cAAe,OAAQ,SAAS+R,EAAgBkE,EAAa1K,GAC3F,MkB/5FNyK,UAAAA,GlBg6FQ,GkBh6FRhG,GAAA3U,EAAAiuB,OAAAjY,EAAAA,EAAAA,SAAAmQ,EAAAnmB,EAAAwuB,KlBm6FY9Z,EAAa,SAASwB,EAAMvB,GkBj6FxC,MAAAkd,GAAAnb,WAAA6U,EAAAA,EAAAvV,IAEA8b,EAAAA,GAEAnd,OAAAG,EAAAid,WACA/b,KAAApB,EAAA8Q,OAAA5Q,EAAAyR,eAAArQ,EAAA2U,EAAAA,cAAAA,GlBq6FYmH,EAAiBH,EAAY1oB,MAAMnJ,EAAQ6uB,WAAWoD,OAAOJ,EAAY1oB,MAAM,EAAGnJ,EAAQ6uB,YkBn6FtGO,EAAAA,EAAAA,YAAAA,+BAAAA,EAAAA,KAAAA,qCAAAA,SACAza,EAAA3U,EAAAmuB,QAAAA,EAAAA,UAAAA,EAAAA,oBAAAA,YAAAA,EAAAA,WAAAA,GAAAA,OACA1jB,GACA8lB,KAAAA,EAAAA,clBq6FUjK,MkBr6FVA,EAAAE,WlBs6FUtQ,KAAMpB,EAAU+V,WkBp6F1BuE,IlBu6FUza,OkBt6FVnT,EAAAS,UlBu6FUwI,MkBv6FVib,ElBw6FU6K,OACEjK,MkBz6FZpQ,GlB26FUjQ,OkB16FV8rB,SAAAxa,EAAAA,IlB26FiBxW,KkB16FjBqvB,OAAAvF,GAAAA,EAAAjW,gBAAAsB,EAAA2U,MAAA3U,EAAAsQ,aAAA5R,EAAA0R,OAKA1R,QAAAA,OAAAsB,GACA6b,KAAA5B,EAAAA,MAAAA,clBu6FgB7J,MAAOyL,EAAO9Z,MAAMuO,WACpBtQ,KAAM6b,EAAO9Z,MAAM4S,YkBp6FnCkH,EAAAG,WACAC,EAAAA,YAAAD,EAAAA,MAAA9G,IAAAA,EAAAA,aACAxW,EAAAwd,KAAAL,EAAAta,MAAAya,UACAH,EAAAM,oBlBy6FUC,MkBr6FVC,WACA,GAAAlM,GAAAA,GAAAA,MAAAA,EAAAA,KAAAA,EAAAA,MAAAA,GACA8L,EAAA5mB,EAAA6f,oBACA/E,EAAA1L,GAAAuQ,OAAAA,EAAAkH,MAAA3a,EAAAA,EAAA8O,SAAA6L,EAAAA,UAAA5L,IACA+L,EAAAlpB,EAAAA,oBAAA6M,EAAAmQ,EAAAA,qBAAAA,GAAAA,MAAAA,EAAAA,UAAAA,cAAAmM,KAAAC,IAAA3H,EAAAA,GAAAA,OAAAA,EAAAA,KAAAA,EAAAA,IlB06FY,KkB16FZ4H,GAAAnpB,GAAAG,KAAAgpB,EAAArM,EAAAG,GAAAA,EAAAA,IlB26FcH,EkB36FdtO,EAAAuY,qBAAAjK,GAAAA,MAAAA,EAAAA,cAAAA,EAAAA,WAAAA,EAAAA,UAAAA,IlB46FckM,EAAKlpB,MACH6M,KAAMmQ,EkB36FtBnjB,QAAA6G,EAAA2K,iBAAAwd,EACAhvB,MAAAyvB,EAAAtM,EAAAtlB,KAAA4T,QACAzR,SAAA0vB,EAAAd,OAAAA,KAAAA,WAAAA,GACA5uB,MAAAiV,EAAA1N,aAAAA,EAAAA,MACA1J,SAAAA,KAAAuvB,WAAAjK,IAGAnjB,GAAA6G,MAAAkO,EAAA/B,EAAAqQ,EAAAwL,kBlB66FY7uB,EAAMyvB,YAAa,EkB36F/BrC,EAAAA,OAAAwB,EACA5uB,EAAA4S,KAAAI,EAAAoB,EAAAA,KAAAA,OAGAvW,KAAA+U,OAAA9V,GlB46FU6yB,WkBt6FV7yB,SAAA+vB,GlBu6FY,MkBt6FZgC,GAAAxmB,OAAAvL,EAAAA,gBAAA+vB,EAAA3pB,MAAAmF,eAAA2K,EAAAsQ,aAAAuL,EAAA9Z,MAAAuO,YAAAtQ,EAAA2U,YAAAkH,EAAA9Z,MAAA4S,WlBw6FUyF,WkBt6FV,SAAApa,GlBu6FY,GAAIJ,GAAOI,EAAKoB,SAChB,IAAIxB,EAAO9V,EAAQyuB,SAAW3Y,EAAO9V,EAAQ0uB,QAAS,OAAO,CAC7D,IAA0D,KAAtD1uB,EAAQ8uB,mBAAmB/S,QAAQ7F,EAAK4c,UAAkB,OAAO,CkBp6FjF,IAAA9yB,EAAA+vB,mBlBs6Fc,IAAK,GAAIxkB,GAAI,EAAGA,EAAIvL,EAAQ+vB,mBAAmB3pB,OAAQmF,IkBp6FrEulB,GAAAA,GAAA9wB,EAAA6F,mBAAAA,GAAAA,OAAAA,GAAAA,EAAAA,mBAAAA,GAAAA,IACAksB,OAAA9Z,CAIA,QAAAU,GlBu6FUmY,UkBh6FV/vB,SAAAuvB,GlBi6FY,GAAKyB,EAAO9Z,MAAZ,CkB75FZtD,GACAlK,GADAkK,EAAAyZ,EAAAA,MAAAA,SAEAmC,MAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,QAAAA,KAAAA,EAAAA,QAAAA,EAAAA,GAAAA,MAAAA,EAAAA,OAAAA,KAAAA,EAAAA,UAAAA,EAAAA,GAAAA,MAAAA,EAAAA,SAAA7K,KAAA4K,WAAA3X,IAAAoZ,EAAArsB,OAAAiT,GAAA;KlBo6FUuD,KkBl6FV,QlBm6FUvH,OkBl6FVnT,EAAAS,YlBm6FUwI,MkBn6FVib,ElBo6FU6K,OACE7K,KkBr6FZxP,GlBu6FUjQ,OkBt6FV8rB,SAAAxa,EAAAA,GlBu6FiBxW,KkBt6FjBqvB,OAAA5J,EAAAA,gBAAAF,EAAAZ,KlB66FuBxP,EAAKsQ,aAAe5R,EAAS0R,QkBx6FpDgM,QAAArwB,OAAA2S,GAEAme,MAAAA,EAAAA,MAAAA,WACAzM,KAAAA,EAAAA,MAAAA,YAEAA,EAAAA,oBATA9kB,QAAAS,OAAA2S,GAAA0R,KAAAA,EAAAyL,MAAA9Z,cAAA/B,MAAA6b,EAAA9Z,MAAA4S,WlBy6FgB3U,KAAM6b,EAAO9Z,MAAM4S,YAErBkH,EAAOxa,WASX+a,MkB16FV5oB,WlB66FY,IAAK,GkB76FjBqO,GAAAxO,KlB66FqBgC,EAAI,EAAO,GAAJA,EAAQA,IACtB+a,EAAQ,GAAI7O,MAAK7C,EAAS8Q,KAAMna,EAAG,GkB56FjDrI,EAAA6G,MACA7G,KAAAyvB,EACAzvB,MAAAiV,EAAA4a,EAAAhyB,KAAA0J,QACA1J,SAAAgxB,EAAAzZ,YAAAgO,GlB86FgBvO,SAAUhX,KAAKuvB,WAAWhK,IAG9BpjB,GAAM6G,MAAQ2K,EAAW4R,EAAOtmB,EAAQuuB,iBkB56FpD+B,EAAAA,YAAApa,EACAhT,EAAA8vB,KAAAA,EAAAD,EAAA7c,KAAAqQ,OACAxlB,KAAAqvB,OAAA4C,GAEAlC,WAAA,SAAAjrB,GACA,MAAAksB,GAAA9Z,OAAA/B,EAAAqQ,gBAAAwL,EAAA9Z,MAAAsO,eAAArQ,EAAAsQ,aAAAuL,EAAA9Z,MAAAuO,YlB+6FU8J,WAAY,SAASpa,GkB56F/B,GAAA+c,IAAAA,GAAAlB,MAAA9Z,EAAAA,cAAAuO,EAAAA,WAAAA,EAAAA,EACA,OAAA7N,GAAAlB,EAAAsa,SAAA9Z,EAAAA,UAAAA,EAAAA,SlB+6FU6Y,UkBx6FV/vB,SAAAuvB,GlBy6FY,GAAKyB,EAAO9Z,MAAZ,CkBr6FZtD,GAAAA,GAAA0Z,EAAAA,MAAAA,WACA5jB,EAAA,GAAAgN,MAAAsa,EAAA9Z,MACAsY,MAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,EAAAA,SAAAA,EAAAA,SAAAA,EAAAA,GAAA7K,KAAA4K,WAAA3X,IAAAoZ,EAAArsB,OAAAiT,GAAA,OlB46FUuD,KkB16FV,OlB26FUvH,OkB16FVnT,EAAAS,WlB26FUwI,MkB36FVib,ElB46FU6K,OACE7K,KkB76FZxP,IlB+6FUjQ,OkB96FV8rB,SAAAxa,EAAAA,IlB+6FiBxW,KkB96FjBqvB,OAAA7J,GAAAA,SAAA3R,EAAAA,cAAA,GAAA,MAAA7G,SAAA6G,EAAA8Q,KAAA,GAAA,KACAlkB,QAAAS,OAAA2S,GAAA8Q,KAAAqM,EAAA9Z,MAAAsO,cAAAD,MAAAyL,EAAA9Z,MAAAuO,WAAAtQ,KAAA6b,EAAA9Z,MAAA4S,YACAkH,EAAA5B,UlBm7FuBja,EAAKqQ,gBAAkB3R,EAAS8Q,OACzClkB,QAAQS,OAAO2S,GkBj7F7B0d,KAAAP,EAAA9Z,MAAAsO,cACA2M,MAAAA,EAAAte,MAAAA,WACAue,KAAAA,EAAAA,MAAAA,YAEApB,EAAAxmB,oBlBq7FU+mB,MkBn7FVpc,WlBu7FY,IAAK,GkBv7FjB6B,GAAArO,EAAAgL,EAAAgR,KAAA3kB,EAAA4T,MAAAA,EAAAA,KAAAA,OAAApL,KlBu7FqBgC,EAAI,EAAO,GAAJA,EAAQA,IACtBma,EAAO,GAAIjO,MAAKyb,EAAY3nB,EAAG,EAAG,GkBt7FhDrI,EAAA6G,MACA7G,KAAAyvB,EACAzvB,MAAAiV,EAAAgb,EAAApyB,KAAA0J,QACA1J,SAAAgxB,EAAAzZ,YAAAoN,GlBw7FgB3N,SAAUhX,KAAKuvB,WAAW5K,IAG9BxiB,GAAM6G,MAAQopB,EAAM,GAAGzpB,MAAQ,IAAMypB,EAAMA,EAAM/sB,OAAS,GAAGsD,MkBt7FzE4mB,EAAAA,YAAApa,EACAhT,EAAA8vB,KAAAA,EAAAG,EAAAjd,KAAAqQ,OACAxlB,KAAAqvB,OAAA4C,GAEAlC,WAAA,SAAAjrB,GACA,MAAAksB,GAAA9Z,OAAA/B,EAAAqQ,gBAAAwL,EAAA9Z,MAAAsO,elBy7FU+J,WAAY,SAASpa,GkBt7F/B,GAAAkd,IAAAA,GAAArB,MAAA9Z,EAAAsO,cAAAA,EAAAA,EAAAA,EACA,OAAA5N,GAAAlB,EAAAsa,SAAA9Z,EAAAA,UAAAA,EAAAA,SlBy7FU6Y,UkBl7FV/vB,SAAAuvB,GlBm7FY,GAAKyB,EAAO9Z,MAAZ,CkB96FZmX,GAAAA,GAAAR,EAAAyE,MAAAvN,cACAlR,EAAAA,GAAAA,MAAAA,EAAAA,MlBk7FgC,MAAhB/O,EAAIY,QAAgBkS,EAAQ2a,QAAQF,EAAa,GAA6B,KAAhBvtB,EAAIY,QAAgBkS,EAAQ2a,QAAQF,EAAa,GAA6B,KAAhBvtB,EAAIY,QAAgBkS,EAAQ2a,QAAQF,EAAa,GAA6B,KAAhBvtB,EAAIY,SAAgBkS,EAAQ2a,QAAQF,EAAa,GAC1OryB,KAAKuvB,WAAW3X,IAAUoZ,EAAOrsB,OAAOiT,GAAS,MmBxkHlEnX,QAIAZ,MAAAA,EAAAA,QAAAA,MAAAA,UAAAA,MAAAA,KAAAA,EAAAA,EAAAA,SAAAA,EACAC,SAAA+T,QnB6kHEpT,QAAQf,OAAO,8BAA+BwD,SAAS,YAAa,WmBtkHtE,GAAAhD,GAAAA,KAAAF,UACAF,UAAAE,cAGAka,gBAAAzZ,EACAA,YAAAC,KnBskHM8xB,gBmBrkHNxgB,EnBskHMygB,eAAe,GmBjkHrBhyB,EAAAC,KAAAR,WAAA,SAAAsE,EAAAsB,EAAA6U,GnB0nHM,QmB7iHN+X,GAAAC,GnB+iHQ,IAAK,GADDD,GAAgBxY,EAAKyY,SAASjY,QACzBlQ,EAAI,EAAGA,EAAIkoB,EAAcrtB,OAAQmF,IACpC5F,EAAQ8tB,EAAcloB,KmB3iHpCkoB,EAAA/xB,GAAAA,EAAAA,GAAAA,GAEA+xB,EAAA1X,KAAAra,EAAAA,SAAA0E,SnB6iHYqtB,EAAcloB,GAAK0P,EAAKyY,SAASttB,OAAS,GAIhD,QmB3iHNstB,GAAAjY,GnB4iHQ,GAAIkY,GAAc1Y,EAAKyY,SAASjY,OAChC,OAAsC,KAA/BkY,EAAY5X,QAAQra,IAAgB,GAAQ,EAErD,QmB1iHNuZ,GAAAuY,GnB2iHQ,GmBziHRvY,GAAAyY,EAAAjY,SAAAO,QAAAD,QAAAra,EnB0iHsB,MAAViE,GmBviHZsV,EAAAA,SAAAyY,QAAAjY,OAAAM,EAAAra,GnB2iHM,QAASkyB,GAAalyB,GACfuZ,EAAKtL,SAAS6jB,emBriH3B7uB,EAAAA,SAAA8W,QAAAO,OAAA,EAAA,GAEApb,KAAAizB,EAAAjzB,SAAAA,QAAAA,QAAAA,IACAizB,EAAAA,SAAA5yB,QAAAA,KAAAA,GnBs9GM,GmBnkHNga,GAAAzZ,InBokHMyZ,GmBnkHNA,SAAAtL,QAAA9N,KAAAjB,GnBokHMY,QAAQC,SAAU,YAAa,iBAAkB,cAAe,iBAAkB,iBAAmB,SAASI,GACxGL,QAAQuR,UAAU2I,EAAO7Z,MAAOoZ,EAAKtL,SAAS9N,GAAO6Z,EAAO7Z,KmBhkHxEoZ,IAAAA,GAAAyY,eAEAzY,SAAA6Y,SAAAA,iBAAAA,iBAAAA,iBAAAA,SAAAA,GAEAC,QAAAA,UAAArY,EAAA7Z,KAAAzB,EAAAA,KAAAA,EAAAA,MACA6a,EAAA+Y,SAAA3qB,IAAAjJ,KnBmkHM6a,EmBhkHNA,YnBikHMA,EAAKyY,YmB9jHXzY,EAAAgZ,wBnBgkHMhZ,EmB/jHN8Y,gBAAAC,SAAAjY,GAEAd,EAAA+Y,SAAAhY,KAAAA,IAEAf,EAAAiZ,gBAAAA,SAAA9zB,GACA6a,EAAAtV,SAAAsV,KAAAyY,InBgkHMzY,EmB3jHNgZ,kBAAAT,SAAAA,GnB4jHQ,GmB1jHRW,GAAAA,EAAA/zB,SAAAA,QAAAA,EnB2jHQ6a,GAAK+Y,SAAShY,OAAOrW,EAAO,IAE9BsV,EmBvjHNA,kBAAA6Y,SAAAryB,GnBwjHQ,GmBvjHR0a,GAAAA,EAAAA,SAAAA,QAAAA,EnBwjHQlB,GAAKyY,SAAS1X,OAAOrW,EAAO,GACxBsV,EAAKtL,SAAS6jB,emBpjH1BvY,EAAAQ,GAEA2Y,EAAA1yB,GnBsjHQuZ,EmBrjHRA,qBAAAvZ,QAAAA,SAAAA,GnBsjHUya,OAGJlB,EmBrjHN2Y,SAAAA,QAAAlyB,EAAAA,SAAAA,mBAAAA,GnBsjHMuZ,EAAKgB,WAAa1W,EAAO0W,WAAa,SAASva,GmBnjHrDuZ,QAAA6Y,QAAAA,GACA3X,EAAAA,SAAAA,QAAAA,GnBqjHoBlB,EAAKtL,SAAS0kB,gBAAkBC,EAAS5yB,GACnDyyB,EAAezyB,GmBjjHzBkyB,EAAAjkB,GnBqjHQsL,EAAK6Y,qBAAqBryB,QAAQ,SAAS0a,GmBljHnDA,OnBsjHMlB,EmBhjHNsZ,eAAAtZ,WACA,MAAAA,GAAA1P,SAAAA,cACA5F,EAAA8tB,SAAAA,QnBkjHgD,IAAjCxY,EAAKyY,SAASjY,QAAQrV,OAAe6U,EAAKyY,SAASjY,QAAQ,GAAK,ImBlgH/E1a,MAAA4D,KAAA,WACAiD,GAAAA,KnBqiHM,OmBpiHN3G,GAAAA,SAAAL,EACAqC,EAAAhC,WAAAwG,EAEA8U,KnBmiHKhV,UmBhiHLgV,cAAA,UAAA,WAAA,YAAA,SAAAxX,EAAA8M,EAAAgiB,GnBiiHI,OACEjsB,SmB9hHN2U,WAAAxT,cnB+hHM9H,YAAc,SAAU,WAAY,SAAU4yB,EAAU5yB,YACxDgC,KmB5hHNsZ,SAAAnT,EAAAC,EAAAoT,EAAAnT,GnB6hHQ,GmB3hHRiT,GAAA+B,EAAAhV,GnB4hHYkrB,EmBzhHZvY,EAAA3S,EnB0hHYiT,KACFiY,EmBzhHVf,qBAAAe,KAAAD,WnB0hHYhY,EmBxhHZ/a,cAAAiyB,EAAAc,oBnB0hHUhY,EmBthHViY,YAAAvY,KAAAA,SAAA3S,GnBuhHY,GAAI9H,QAAQ8c,QAAQhV,GAClBkrB,EmBthHdf,WAAAA,OACAe,CnBuhHc,GAAIf,GAAgBe,EAAeD,gBAC/B/yB,SAAQ8c,QAAQmV,GmBrhHlCnqB,KAAAA,EAAAA,QAAAA,EAAAA,InBuhHkBkrB,EAAevY,WAAwB,EAAb3S,GAEnBmqB,IAA+B,EAAbnqB,GAC3BkrB,EAAevY,WAAwB,EAAb3S,GmB7gH1C1B,MAAA0B,WnBqhHO/B,UmBxgHPqC,mBAAA,WnBygHI,OACEhC,SAAW,YAAa,eACxB3E,KmBvgHN7C,SAAA8C,EAAA9C,EAAAqc,EAAAK,GnBwgHQ,GmBvgHR0X,GAAAzc,EAAA,EnBwgHQ3X,GmBvgHRuF,KAAAA,cAAA8uB,YnBwgHQD,EmBvgHRA,gBAAA7uB,GnBwgHQzC,EmBvgHRA,IAAAmb,WAAAA,WnBwgHUmW,EAAeP,kBAAkB7zB,KAEnCA,EAAQ6K,GAAG,QAAS,WAClB,IAAKwR,EAAM1E,SAAU,CmBlgH/BxQ,GAAA5B,GAAA8W,EAAAgY,kBAAA5iB,uBAAA4K,EAAAgY,iBAAA5iB,EAAAA,iBAAAA,EAAAA,SAAAA,QAAAA,EAEA2iB,GAAAvY,WAAA,EAAAtW,GACAiC,EAAAyW,gBnBugHK9W,UmB3/GLnH,oBAAAo0B,WAAA7kB,SAAA9O,GnB4/GI,OACE+G,SmBz/GN4sB,YAAAE,enB0/GMzxB,KmBv/GNC,SAAAA,EAAA9C,EAAAqc,EAAAK,GnBigHQ,QAASC,KACP,GAAIpX,GmBt/GdA,EAAAkW,SAAAE,QAAA3b,GACAu0B,EAAAH,EAAAD,iBnBu/GcI,EAAS,amBp/GvB9iB,SAAA8iB,QAAAv0B,GnBs/G0C,KAA1Byb,EAAOE,QAAQpW,KmBn/G/B6uB,EAAAV,YnBs/GqBnuB,IAAUkW,ImBn/G/BkB,EAAAA,YnBs/GUlL,EAAS8iB,GAAQv0B,EAASo0B,EAAe7kB,SAASwL,aApBpD,GmBv/GRqZ,GAAAN,EAAAA,EnBw/GQ9zB,GAAQoR,SAAS,YmBr/GzBgjB,EAAAzX,SAAAA,WACA3c,EAAAuF,SAAA6uB,EAAAd,SAAA3X,WnBw/GQyY,EmBt/GRE,gBAAAt0B,GnBu/GQ8C,EmBt/GR1B,IAAAA,WAAAqa,WnBu/GU2Y,EmBt/GVzY,kBAAA3b,KC1PAoB,EAAAsyB,qBAAAzqB,KAEApF,WAEArD,MAEAg0B,SpBgwHEpzB,QoB5vHFZ,OAAAA,4BAAAA,SAAAA,UAAAA,WpB6vHI,GAAIA,GAAWG,KAAKH,UAClBua,YAAa,SoBzvHnB5T,YAAA,QpB4vHIxG,MoBzvHJ4G,KAAA,WACAC,OACA5G,SAAAJ,MpB4vHK2G,UoBzvHLhE,kBAAAqP,WpB0vHI,OACEjL,SoBzvHN8Z,IpB0vHM7Z,QoBzvHN6Z,UpB0vHMzgB,QoBzvHNygB,SAAArhB,EAAAqI,GpB0vHQrI,EAAQsH,KAAK,cAAe,WAC5BtH,EAAQsC,WAAW,WACnB,IAAIa,GAAWnD,EAAQ,GAAGwS,iBAAiB,yBoBpvHnDrL,SAAA9F,QAAA8B,EAAA,SAAAme,GAEA9gB,GAAAA,GAAAi0B,QAAAj0B,QAAAA,EACAk0B,GAAAA,KAAAA,cAAA,IAEArT,EAAA/Z,KAAA,WAAAA,EAAAe,QAAA,IAAAgZ,EAAA/Z,KAAA,gBpBuvHKH,UoBlvHLvH,cAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GpBmvHI,GoBhvHJA,GAAAm0B,EAAA30B,SACA00B,EAAAC,oBpBivHI,QACEptB,SoB/uHNmtB,IpBgvHMltB,QoB/uHNotB,UpBgvHM/xB,KAAM,SAAkBC,EAAO9C,EAASsH,EAAMzG,GoB9uHpD,GAAAg0B,GAAAA,EACAH,EAAAG,UAAAH,EAAAA,GAAA/sB,SACAktB,EAAA/xB,EAAAwE,EAAAutB,SAAAA,EpBgvHYD,EAAYxzB,QAAQuR,UAAUrL,EAAKstB,WAAattB,EAAKstB,WAAY,CoB5uH7EE,GAAAA,KAAAF,EAAAA,aACAA,EAAAE,EAAAA,MAAAxtB,EAAAstB,WpB+uHQ,IoB5uHRC,GAAAza,QAAAwa,UAAAC,EAAAA,YAAAA,EAAAA,YAAAA,CpB6uHYH,GAAoB/sB,KAAKL,EAAKutB,coB1uH1Ch0B,EAAAmI,EAAAA,MAAAC,EAAA4rB,YpB6uHQ,IAAIC,GAAuC,iBAAdF,IAAiD,iBAAfC,EoBxuHvE/xB,KpB0uHUjC,EoBzuHVA,SAAAiF,KAAAA,SAAAA,GpB0uHY,MAAOsU,GAAYwa,EAAYC,IoBruH3Ch0B,EAAAiF,YAAAmD,KAAA,SAAAC,GAEA,MAAAgrB,SAAA9yB,OAAA6E,EAAApF,KpBwuHUiC,EoBtuHV6xB,OAAAA,EAAA30B,QAAA+0B,SAAAb,EAAAA,GACA3V,EAAAA,aAKAve,EAAAg1B,QAAAR,WACA1xB,GAAAA,GAAA1B,QAAA6E,OAAApF,EAAA2H,YAAAosB,EpBquHU9vB,GoBnuHV,WACAjE,IAAA8H,EAAAA,GAAAA,QAAA4V,GpBouHYA,EAAc0W,YAAYr1B,EAAQmb,YAAamZ,MAGnDl0B,EAAQg1B,KAAKp1B,EAAQ40B,YAAa,WAChC1xB,EAAMmb,OAAO,WACN0W,GACH9zB,EAAW8H,eAAe4V,EAAc6O,SAAS,WoB5tH/D0H,GAEAj0B,EAAAiF,mBpBmuHOqB,UoB7tHPhE,eAAA,WpB8tHI,OACEoE,SoB7tHNnG,IpB8tHMoG,QoB7tHNpG,UpB8tHMR,QAAS,SAAkBZ,EAASsH,GAClCtH,EAAQsH,KAAK,cAAe,WAC5BtH,EAAQsC,WAAW,WoBxtH3B6E,IAAAA,GAAAnH,EAAA,GAAAwS,iBAAA,sBAEAhS,SAAAA,QAAAi0B,EAAAj0B,SAAAA,GACAk0B,QAAAA,QAAAA,GAAAptB,KAAA,WAAA,IAEAlG,QAAApB,QAAAshB,GAAAha,KAAA,WAAAA,EAAAe,epB2tHKlB,UoBttHLvH,WAAAY,UAAAA,QAAAA,SAAAA,EAAAA,GpButHI,GoBptHJA,GAAAm0B,EAAA30B,SACA00B,EAAAC,oBpBqtHI,QACEptB,SoBntHNuL,IpBotHMtL,QoBntHNlG,UpBotHMuB,KoBntHNhC,SAAAiF,EAAAA,EAAAA,EAAAA,GpBotHQ,GoB7sHRhB,GpB6sHYlF,EAAUY,EoBhtHtBK,EAAA,UAAAiF,EAAA,GAAA8E,SAEA2T,EAAAnd,EAAA6E,EAAApF,SAAA2H,CpBktHQlB,GoBhtHRwL,SAAA6hB,QAAA30B,SAAA+0B,GpBitHUzzB,EoBhtHVid,EAAA3e,KAAAA,GAAAmb,EAAAA,MAAAmZ,GAAAA,EpBitHUrzB,EAAWiF,YoB5sHrB9F,EAAAg1B,QAAAR,WACA1xB,GAAAA,GAAA1B,QAAA6E,OAAApF,EAAA2H,YAAAlH,EpB+sHUwD,GoB7sHVjE,WACAA,IAAAiF,EAAAA,GAAAA,QAAAA,GpB8sHYyY,EAAc0W,YAAYr1B,EAAQmb,YAAamZ,MAGnDl0B,EAAQg1B,KAAKp1B,EAAQ40B,YAAa,WAChC1xB,EAAMmb,OAAO,WqBj3HvB5d,EAAAsI,cAAArH,GAIAd,EAAAG,mBrBq3HES,QqB/2HF0C,OAAA,wBAAA,yBAAAD,SAAA,SAAA,WrBg3HI,GqB/2HJ7D,GAAAW,KAAAH,UACA8qB,UAAA,UACAvnB,YAAA,QACAwC,YAAA,QAEA2uB,UAAA,KACAtrB,YAAA,uBACAurB,WAAAA,ErB+2HMn1B,QAAS,KqB52HfW,UAAA4D,EAEAR,UAAAqxB,ErB62HM7uB,MqB32HN8uB,ErB42HMH,UqBz2HNt1B,ErB02HMgK,MqBx2HNyrB,ErBy2HMF,aqBt2HNhwB,ErBw2HIxE,MAAK4D,MqBt2HTY,SAAAyE,WAAAA,SAAAA,EAAAA,GrBu2HM,QAASwrB,GAAanwB,GqBn2H5B,GAAAsB,MACA3G,EAAAs1B,QAAArzB,UAAArB,EAAAyE,ErBq2HQowB,GqBp2HR9uB,EAAA3G,GrBq2HQy1B,EqBp2HR9uB,OAAAA,cAAAA,EAAAA,YACAxB,EAAAA,OrBq2HUswB,EqBp2HVA,OAAA3uB,KAAAA,EAAAA,KrBs2HQ,IAAIH,GAAO8uB,EAAO9uB,IqBn1H1BzD,OrBo1HYlD,GAAQs1B,WqBl2HpBG,EAAAA,KAAAA,WrBo2HY9uB,IqBh2HZxB,EAAAqwB,WrBk2HcC,EAAO3uB,QqB51HrB,IAAA9G,EAAAs1B,YAIAG,ErB81HM,MqB11HNz1B,OrB41HKuH,UqB51HLnH,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GrB61HI,OACEuH,SAAU,MACVzE,OqB91HN1B,ErB+1HMyB,KqB91HN,SAAA8P,EAAAlR,EAAA7B,EAAA6B,GrB+1HQ,GAAI7B,IqB31HZkD,MAAA2E,EACArG,QAAAC,EACAkF,MAAAnF,EAKAA,SAAA0B,SAAA+P,WAAA,cAAA,aAAA,eAAA,YAAA,WAAA,OAAA,YAAA,YAAA,WAAA,eAAA,SAAApR,GACAqB,QAAA6G,UAAArC,EAAA7F,MAAA7B,EAAA6B,GAAA6F,EAAA7F,KAIAL,IAAAA,GAAA,erBw1HQA,SqBv1HRkG,SAAA,WAAA,OAAA,YAAA,eAAA,SAAA7F,GACA6F,QAAAwL,UAAAxL,EAAA7F,KAAA6G,EAAAC,KAAAA,EAAAA,MAAAA,EAAAA,IAAAA,KrBy1HazF,EAAM+P,eAAe,WACxB/P,EAAM6G,MAAQ,IqBn1HxBvI,QAAAkG,SAAA,QAAA,UAAA,QAAA,SAAA7F,GACAqB,EAAAsF,IACAd,EAAAlG,SAAAkC,EAAAA,SAAAgF,EAAAC,GACAnH,EAAAA,GAAAS,EAAAiB,YAAAwF,OrBy1HYhB,EqBr1HZguB,SrBs1HUxyB,EAAMsF,OAAOd,EAAKguB,QAAS,SAAShtB,EAAUC,GqBl1HxDgtB,QAAAF,SAAAz1B,GAGAI,QAAAsH,OAAA1D,EAAA0E,GAIAitB,EAAAA,QAAAlsB,IAEAksB,ErBi1HQ,IAAIA,GAAQF,EAAOz1B,EACnBI,GAAQ6K,GAAGvD,EAAK1D,SAAW,QAAS2xB,EAAMzqB,QAC1ChI,EAAM0G,IAAI,WAAY,WsBz8H9BnJ,GAAAk1B,EAAAlsB,UAIA7I,EAAAG,KACAF,EAAA,YtB48HEW,QsBv8HFiB,OAAAA,wBAAA,yBAAAwB,SAAA,SAAA,WtBw8HI,GsBv8HJC,GAAAnD,KAAAH,UACAR,UAAA,0BACAsrB,YAAA,QACAvnB,YAAA,QACAxB,UAAA,QACAgE,YAAA,uBtBw8HMlE,iBAAiB,EsBr8HvB1B,WAAA4D,EAEAvE,QAAAw1B,KtBs8HMlK,UsBp8HNmK,EtBq8HM1xB,UsBl8HNnE,EtBm8HM2C,MsBj8HNkzB,EtBk8HMlvB,MsBh8HN,EtBk8HI5F,MsB97HJ4D,MAAAixB,SAAAA,SAAAA,GtB+7HM,QAASA,GAAavwB,GsBz7H5BkC,GAAAA,MAEAvH,EAAAwB,QAAAS,UAAArB,EAAAyE,EAEAnC,OADAyE,GAAAokB,EAAA/rB,GtB47HM,MsBx7HNA,OtB07HKuH,UsB17HLnH,WAAAA,UAAAA,OAAAA,SAAAA,SAAAA,EAAAA,EAAAA,GtB27HI,OACEuH,SAAU,MACVzE,OsB57HN1B,EtB67HMyB,KsB57HN,SAAA8P,EAAAlR,EAAA7B,EAAA6B,GtB67HQ,GAAI7B,IsBz7HZkD,MAAA2E,EACArG,QAAAC,EACAkF,MAAAnF,EAIAA,SAAAC,SAAA,WAAA,cAAA,aAAAI,eAAAA,kBAAAA,YAAAA,WAAAA,WAAAA,OAAAA,YAAAA,aAAAA,SAAAA,GACA6F,QAAA7F,UAAA6F,EAAA7F,MAAA7B,EAAA6B,GAAA6F,EAAA7F,KtB07HQ,IAAIgG,GsBx7HZqI,etBy7HQ1O,SAAQC,SAAU,WAAY,WAAY,OAAQ,aAAe,SAASI,GACpEL,QAAQuR,UAAUrL,EAAK7F,KAASgG,EAAiBE,KAAKL,EAAK7F,MAAO7B,EAAQ6B,IAAO,KsBp7H/FL,QAAAkG,SAAA,QAAA,WAAA,SAAA7F,GACAqB,EAAAsF,IACAd,EAAAlG,SAAAkC,EAAAA,SAAAgF,EAAAC,GACAnH,EAAAA,GAAAS,EAAAiB,YAAAwF,OtB07HYhB,EsBt7HZouB,StBu7HU5yB,EAAMsF,OAAOd,EAAKouB,QAAS,SAASptB,EAAUC,GsBn7HxDotB,QAAAF,SAAA71B,GAGAI,QAAAsH,OAAA1D,EAAA0E,GAIAqtB,EAAAA,QAAAtsB,IAEAssB,EtBk7HQ,IAAIA,GAAQF,EAAO71B,EACnBI,GAAQ6K,GAAGvD,EAAK1D,SAAW,QAAS+xB,EAAM7qB,QAC1ChI,EAAM0G,IAAI,WAAY,WuB5gI9BnJ,GAAAs1B,EAAAtsB,UAIA7I,EAAAG,KACA+f,EAAA,YvB+gIEtf,QuBxgIF8d,OAAAA,wBAAAva,oCAAAA,oCAAAA,SAAAA,SAAAA,WvBygII,GuBvgIJnE,GAAAo1B,KAAAA,UvBwgIMlV,UuBtgINmV,OvBugIMC,cuBpgINl2B,EvBsgIIe,MuBlgIJ4D,MAAAwxB,UAAA,WAAA,aAAA,SAAApxB,EAAAwa,EAAA5S,GvBqgIM,QuBlgINypB,GAAAA,EAAA/wB,GvBunIQ,QuBt9HRgxB,GAAAC,EAAA9oB,EAAAf,GvBu9HU,GuBt9HVU,GAAAopB,IvBu9HcC,EAAeC,GuBr9H7B,OAAA3V,IAAA3T,EvBu9HmB,MuBp9HnBopB,OAAAA,GAAAA,EAAAA,GAAAA,EAAAA,IACA1d,SvBs9HsC,OAAjB6d,GAAyBlpB,EAASf,IAAMkqB,EAAgBC,GAAmBJ,EAAeE,EuBn9H/GD,SvBs9HiB,SuBj9HjB,QAAAR,KvBo9HU,MAAOpd,GAAS,KAAO9T,EAAUA,EAAQ8xB,YAAche,EAAS,GAAG1L,UAErE,QAASspB,KuB58HjBlvB,MAAAsR,GAAA,KAAA9T,EAAAA,EAAAkI,SAAAgpB,KAAAA,aAAAlxB,EAAAA,GAAAA,aAzLA,GAAA+b,MACA4V,EAAAA,QAAAz0B,UAAArB,EAAAyE,GACAyxB,EAAA92B,EAAA6J,OACAktB,EAAA,+BAEA7lB,GAAA9Q,EAEAJ,EAAA4jB,EACAwS,EAAAxS,EACA9C,EAAAvV,EvBigIYmrB,EuBhgIZxlB,EvBigIY4lB,EAAU,KACVC,EuBhgIZ,KACA7lB,EAAA1P,EAAApB,QvBigIQ,IAAIJ,EAAQ4jB,aACV,GAAI5jB,EAAQ4jB,aAAavQ,MAAM,SuB9/HzC4iB,IAAAplB,GAAAA,GAAA,EAAAtF,EAAA,EAAAvL,EAAA4jB,aAAA,EAAArY,IAEAxK,EAAAi2B,EAAAA,aAKAne,GAAA5N,QAAA7K,QAAAugB,EAAAA,aAqKA/Y,OvB01HQquB,GuBz/HRtV,KAAAA,WACA5f,KAAA0f,gBvB0/HU2V,EAAmBzpB,EAAWC,OAAOxM,EAAQ,IAAIqM,IAAMmqB,EuBt/HjEX,GAAAxsB,EAAA,GAAA4a,MAAA9X,MAGAsM,EAAAvN,GAAAA,SAAAvK,KAAAA,eACA8X,EAAAvN,GAAAA,QAAAvK,KAAAA,4BACAue,EAAAhU,GAAAA,SAAAvK,KAAAA,oBvBs/HUA,KAAK4f,gBuBl/HfsV,KAAAxV,8BvBq/HQwV,EAAOxsB,QAAU,WuB7+HzBwsB,EAAAtV,IAAAA,SAAA5f,KAAA4f,eAGA9H,EAAA1L,IAAAA,QAAAopB,KAAAA,4BACAjX,EAAA9R,IAAAA,SAAAb,KAAAC,qBvB8+HQqpB,EuB1+HRgB,2BAAAF,WAGAhW,WAAA+V,EAAAG,cAAA,IvB0+HQhB,EuBv+HRgB,cAAA,WvBw+HU,GuBv+HVF,GAAAR,IACA/oB,EAAA0pB,EAAAtqB,OAAAxM,EAAA,IACAA,EAAAuM,EAAAH,OAAApM,EAAA,IvBw+Hc62B,EAAQZ,EAAsBU,EAAOvpB,EAAUmpB,EuBt+H7DG,KAAAZ,IvBw+HUY,EuBv+HV12B,EACA6N,QAAA7N,GvBw+HY22B,EAAQ,KACJG,GuBt+HhB92B,EAAAJ,IAAAm3B,QAAAA,IvBy+HgBn3B,EuBv+HhBk2B,eAGAa,EAAAvpB,IAAAA,WAAAL,EAAAA,aAAAA,GAAAA,YvBs+Hc/M,EAAQ6N,IAAI,MAAO,MuBn+HjC,WAAA7N,GAEA22B,EvBo+HgB/2B,EAAQm3B,cuBp+HxB,EAAAjB,EAAAA,aAEAjoB,EAAAxB,IAAAzM,EvBu+HgBk3B,GuBp+HhBH,EAAA9oB,IAAA,QAAA,IAEA7N,EAAA6N,evBs+Hc7N,EAAQ6N,IAAI,WAAYjO,EAAQ4jB,aAAe,GAAK,YuBp+HlExjB,EAAAJ,IAAAk2B,MAAAA,EAAAtS,aAAA,GAAApE,EAAA,GAAAnR,aAAAqoB,EAAAC,EAAAP,EAAA,SvBw+HYW,EAAQ,KACJG,GuBl+HhB92B,EAAAmS,IAAAA,QAAA4jB,EAAA3kB,GAAAhD,YAAAyoB,MAIAG,EAAAA,eACAnB,EAAAe,IAAAA,WAAAA,SACAf,EAAAtV,IAAAA,MAAAA,EAAAA,QAIAsV,EAAAe,YAAAA,GAAAxlB,SAAA,SAAA,WAAAylB,EAAA,IAAAA,EAAA,OvBk+HQhB,EuB/9HRj2B,UAAAk2B,WvBg+HUD,EuB/9HV71B,gBvBg+HU61B,EAAOtV,iBAETsV,EuB99HRoB,mBAAAvW,EAAAmV,EAAAmB,UAAA,IvB+9HQnB,EuB99HRj2B,cAAA8gB,WvB+9HU,GAAIwW,GAAkBl3B,EAAQ6N,IAAI,WuB79H5CjO,GAAAA,cvB+9HYI,EuB99HZw2B,IAAAA,WAAA52B,EAAA8gB,aAAA,GAAA,YvBg+Hc9gB,EuB99Hd8gB,YACA,SvB89HgB9gB,EuB99HhB8gB,YvB+9Hc9gB,EuB99Hd8gB,UAAAnU,MvBg+HgB3M,EuB99HhB8gB,UAAAzN,MAAA,cACAyN,EAAA,GAAA9gB,EAAA8gB,UvBg+HgBA,EADE9gB,EAAQ4jB,aACEjX,EAAWC,OAAOsE,EAAO,IAAIzE,IAA0B,EAApBzM,EAAQ8gB,UuB39HvE8C,EAAAA,OAAA5jB,EAAA02B,IAAAA,IAAArjB,EAAApF,IAAA7N,EAAA,GAAA,aAAA,GAAA,EAAAJ,EAAA8gB,WAIA4V,EAAAA,EAAAA,EAAA12B,WAKAA,EAAAk2B,evB49HcQ,EuB39Hdt2B,EAAAwjB,cAAA0T,EAAAA,aAAAA,MAAAA,avB29H6Bb,KAAqB9pB,EAAWC,OAAOsE,EAAO,IAAIzE,IAAME,EAAWH,OAAO0E,EAAO,KAA8B,EAAvBlR,EAAQ02B,aAAmB,EuBr9HhJlpB,EAAA6oB,EAAAA,cAIAlpB,EAAAA,cACA/M,EAAA6N,IAAA,WAAAqpB,IA+BA3vB,EAAAA,OACAsuB,EvBk0HM,GuBlgINzW,GAAA0X,QAAA92B,QAAA2E,EAAAkI,SAAAG,MACAkS,EAAAsX,QAAAA,QAAA7xB,EvB6oIM,OuB38HN/E,OvB68HKuH,UuB78HLsC,WAAA0tB,SAAAA,UAAA1wB,SAAArF,EAAApB,GvB88HI,OACEuH,SuB98HNlG,MvB+8HMmG,QuB98HNpG,kBvB+8HMyB,KuB98HN,SAAApB,EAAAA,EAAAA,EAAAA,GvB+8HQ,GuB98HR7B,IvB+8HUkD,MuB98HVA,EvB+8HU2G,OuB98HV7J,EAAAw3B,EAAAA,SAAAA,QAAAA,QAAAA,GvBg9HQh2B,SAAQC,SAAU,YAAa,eAAgB,eAAgB,cAAe,gBAAkB,SAASI,GuB58HjH,GAAAo1B,QAAAhB,UAAA71B,EAAAJ,IAAAA,CACAkD,GAAA0G,GAAAlC,EAAA7F,EACAo1B,SAAAA,KAAAxtB,KAAAA,GAAAA,GACAzJ,SAAA+H,KAAAyvB,KAAAA,GAAA,GACAP,EAAAp1B,GAAA21B,IvBg9HQ,IAAIP,GAAQhB,EAAO71B,EAASJ,EuBx8HpCuH,GAAAA,IAAA,WAAA,WACA0vB,GAAAA,EAAAxtB,UACAxI,EAAA,KACAF,EAAA8F,YCpPArF,UAAA,gBAAA,WxB4zLGwiB,OAznDG/iB,YAAc,WAAY,SAAS4F,GACjC9F,KAAK8F,SAAWA,OAItBrF,QAAQf,OAAO,kBAAoB,uBAAwB,uBAAwB,uBAAwB,wBAAyB,wBAAyB,4BAA6B,4BAA6B,wBAAyB,yBAA0B,yBAA0B,0BAA2B,2BAA4B,2BAA4B,uBAAwB,qBAAsB,6BACpaujB,OAAQ/W","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function () {\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later() {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later() {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat(format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex(format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral(text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars(text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat(format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat(format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"], [ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind').html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link(scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement(query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate(template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      function ModalFactory(config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (options.backdrop) {\n            // decrement number of modals\n            backdropCount--;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents() {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents() {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick(evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement() {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.classList.contains('dropdown-menu')) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory(config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory(config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory(element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          }\n\n          // Navigate with keyboard\n          else if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n          else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n          else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = options.filter || defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) bsOptions += ' | ' + filter + ':$viewValue';\n        if (comparator) bsOptions += ':' + comparator;\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (modelValue && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          element.val(options.trimValue === false ? value : value.trim());\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"], [ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind').html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link(scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement(query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate(template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      function ModalFactory(config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (options.backdrop) {\n            // decrement number of modals\n            backdropCount--;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          bodyElement.removeClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents() {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents() {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick(evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault(evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement() {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      contentTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isTouch = 'createTouch' in $window.document;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory(element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(tipElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(tipElement).then(leaveAnimateCallback);\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback() {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function () {\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click') {\n              element.on('click', $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents() {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click') {\n              element.off('click', $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents() {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents() {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents() {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents() {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation(event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) {\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset(placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement(offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta(placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow(delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement() {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest(scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement(query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory(element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes(time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) controller.$dateValue = new Date(1970, 0, 1);\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection(start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime(parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render() {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory(element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              controller.$setViewValue(value);\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected ? selected : options.placeholder) + (options.caretHtml ? options.caretHtml : defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName(element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory(config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements = trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink(scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink(element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory(element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory(attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues(values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement(element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later() {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later() {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate() {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop() {\n  }\n\n  function isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive(array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat(format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex(format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols(text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral(text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars(text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat(format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap(abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat(format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.classList.contains('dropdown-menu')) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink(scope, element, attr) {\n\n          // Directive options\n          var options = {scope: scope};\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory(element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (!angular.isDate(controller.$dateValue)) controller.$dateValue = new Date(date);\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected(el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement() {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges(ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate(parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString() {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split(arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod(n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n              else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n              else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n              else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n              else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n              else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n              else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n              else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n              else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n              else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes(index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive(value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) === -1 ? false : true;\n      }\n\n      function deactivateItem(value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem(value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink(scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render() {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n          // Fix rendering for exotic values\n          scope.$watch(attr.ngModel, function (newValue, oldValue) {\n            controller.$render();\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, trueValue);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            if (!hasExoticValues) {\n              controller.$render();\n            }\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink(element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink(scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          value = constantValueRegExp.test(v) ? scope.$eval(v) : v;\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$modelValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n// @TODO: submit issue to core\n// '<span ng-if=\"title\"><strong ng-bind=\"title\"></strong>&nbsp;</span><span ng-bind-html=\"content\"></span>' +\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory(config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory(config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory(element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element.css('position');\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass(_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null && (scrollTop + _unpin <= position.top)) {\n            return 'middle';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop() {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight() {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink(scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix = $affix(element, options);\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}